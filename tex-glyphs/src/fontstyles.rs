/*! Font modifiers - e.g. bold, fraktur, italic, etc. */
use std::fmt::{Display, Write};
use phf::{Map, phf_map};

/// A font modifier
#[derive(Copy,Clone,Debug,PartialEq,Eq)]
pub enum FontModifier {
    /// Blackboard (e.g. `𝔸`)
    Blackboard = 0,
    /// Fraktur (e.g. `𝔄`)
    Fraktur = 1,
    /// Script (e.g. `𝒜`)
    Script = 2,
    /// Bold (e.g. `𝐀`)
    Bold = 3,
    /// Small capitals (e.g. `ᴀ` for `a`)
    Capitals = 4,
    /// Monospaced (e.g. `𝙰`, which is distinct from `A`)
    Monospaced = 5,
    /// Italic (e.g. `𝐴`)
    Italic = 6,
    /// Oblique (e.g. `𝐴` - in unicode, italic and oblique are the same)
    Oblique = 7,
    /// Sans serif (e.g. `𝖠`, which is distinct from `A`)
    SansSerif = 8,
}

/// A sequence of font modifiers, encoded as bitfields
#[derive(Copy,Clone,Debug,PartialEq,Eq,Default)]
pub struct ModifierSeq {
    pub(crate) blackboard:bool,
    pub(crate) fraktur:bool,
    pub(crate) script:bool,
    pub(crate) bold:bool,
    pub(crate) capitals:bool,
    pub(crate) monospaced:bool,
    pub(crate) italic:bool,
    pub(crate) oblique:bool,
    pub(crate) sans_serif:bool,
}
impl ModifierSeq {

    fn blackboard() -> Self {
        Self{blackboard:true,..Default::default()}
    }

    fn fraktur() -> Self {
        Self{fraktur:true,..Default::default()}
    }

    fn script() -> Self {
        Self{script:true,..Default::default()}
    }

    fn bold() -> Self {
        Self{bold:true,..Default::default()}
    }

    fn capitals() -> Self {
        Self{capitals:true,..Default::default()}
    }

    fn monospaced() -> Self {
        Self{monospaced:true,..Default::default()}
    }

    fn italic() -> Self {
        Self{italic:true,..Default::default()}
    }

    fn oblique() -> Self {
        Self{oblique:true,..Default::default()}
    }

    fn sans_serif() -> Self {
        Self{sans_serif:true,..Default::default()}
    }

    /// And empty sequence of modifiers
    pub fn empty() -> Self {
        Self::default()
    }

    /// Add a modifier to this sequence
    pub fn add(&mut self, m:FontModifier) {
        match m {
            FontModifier::Blackboard => self.blackboard = true,
            FontModifier::Fraktur => self.fraktur = true,
            FontModifier::Script => self.script = true,
            FontModifier::Bold => self.bold = true,
            FontModifier::Capitals => self.capitals = true,
            FontModifier::Monospaced => self.monospaced = true,
            FontModifier::Italic => self.italic = true,
            FontModifier::Oblique => self.oblique = true,
            FontModifier::SansSerif => self.sans_serif = true,
        }
    }

    /// Whether this sequence contains the given modifier
    pub fn has(&self, m:FontModifier) -> bool {
        match m {
            FontModifier::Blackboard => self.blackboard,
            FontModifier::Fraktur => self.fraktur,
            FontModifier::Script => self.script,
            FontModifier::Bold => self.bold,
            FontModifier::Capitals => self.capitals,
            FontModifier::Monospaced => self.monospaced,
            FontModifier::Italic => self.italic,
            FontModifier::Oblique => self.oblique,
            FontModifier::SansSerif => self.sans_serif,
        }
    }

    fn iter<F:FnMut(&Map<char,char>)>(&self,mut f:F) {
        if self.has(FontModifier::Blackboard) {f(&BLACKBOARD);}
        if self.has(FontModifier::Fraktur) {f(&FRAKTUR);}
        if self.has(FontModifier::Script) {f(&SCRIPT);}
        if self.has(FontModifier::Bold) {f(&BOLD);}
        if self.has(FontModifier::Capitals) {f(&CAPITAL);}
        if self.has(FontModifier::Monospaced) {f(&MONOSPACED);}
        if self.has(FontModifier::Italic) || self.has(FontModifier::Oblique) {f(&ITALIC);}
        if self.has(FontModifier::SansSerif) {f(&SANS);}
    }
}
impl From<&[FontModifier]> for ModifierSeq {
    fn from(mods:&[FontModifier]) -> Self {
        let mut s = Self::empty();
        for m in mods {
            s.add(*m);
        }
        s
    }
}
/// A wrapper struct that applies a sequence of font modifiers to a string
pub struct CharConverter<'a,S:AsRef<str>> {
    maps: ModifierSeq,
    iter:&'a S
}
impl<'a,S:AsRef<str>> Display for CharConverter<'a,S> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut chars = self.iter.as_ref().chars();
        while let Some(mut c) = chars.next() {
            self.maps.iter(|m| {
                if let Some(nc) = m.get(&c) {
                    c = *nc;
                }
            });
            f.write_char(c)?;
        }
        Ok(())
    }
}

/// A trait for applying font modifiers to *something*. Implemented for anything
/// that implements `AsRef<str>`, and for [`CharConverter`] for chaining.
pub trait FontModifiable {
    /// The base type of this object; usually `Self`
    type R:AsRef<str>;
    /// Apply the given modifiers to this object.
    fn apply<'a>(self,mods:ModifierSeq) -> CharConverter<'a,Self::R> where Self:'a;
    /// Add the given modifiers to this object.
    fn apply_modifiers<'a>(self,mods:&'a [FontModifier]) -> CharConverter<'a,Self::R> where Self:'a, Self: Sized {
        self.apply(mods.into())
    }
    /// Applies the [`Blackboard`](FontModifier::Blackboard) modifier.
    fn make_blackboard<'a>(self) -> CharConverter<'a,Self::R> where Self:'a;
    /// Applies the [`Fraktur`](FontModifier::Fraktur) modifier.
    fn make_fraktur<'a>(self) -> CharConverter<'a,Self::R> where Self:'a;
    /// Applies the [`Script`](FontModifier::Script) modifier.
    fn make_script<'a>(self) -> CharConverter<'a,Self::R> where Self:'a;
    /// Applies the [`Bold`](FontModifier::Bold) modifier.
    fn make_bold<'a>(self) -> CharConverter<'a,Self::R> where Self:'a;
    /// Applies the [`Capitals`](FontModifier::Capitals) modifier.
    fn make_smallcaps<'a>(self) -> CharConverter<'a,Self::R> where Self:'a;
    /// Applies the [`Monospaced`](FontModifier::Monospaced) modifier.
    fn make_monospaced<'a>(self) -> CharConverter<'a,Self::R> where Self:'a;
    /// Applies the [`Italic`](FontModifier::Italic) modifier.
    fn make_italic<'a>(self) -> CharConverter<'a,Self::R> where Self:'a;
    /// Applies the [`Oblique`](FontModifier::Oblique) modifier.
    fn make_oblique<'a>(self) -> CharConverter<'a,Self::R> where Self:'a;
    /// Applies the [`SansSerif`](FontModifier::SansSerif) modifier.
    fn make_sans<'a>(self) -> CharConverter<'a,Self::R> where Self:'a;
}

impl<'a,S:AsRef<str>> FontModifiable for &'a S {
    type R=S;
    fn apply<'b>(self,mods:ModifierSeq) -> CharConverter<'b,S> where Self:'b {
        CharConverter {
            maps: mods,
            iter:self
        }
    }
    fn make_blackboard<'b>(self) -> CharConverter<'b,S> where Self:'b {
        CharConverter {
            maps: ModifierSeq::blackboard(),
            iter:self
        }
    }
    fn make_fraktur<'b>(self) -> CharConverter<'b,S> where Self:'b {
        CharConverter {
            maps: ModifierSeq::fraktur(),
            iter:self
        }
    }
    fn make_script<'b>(self) -> CharConverter<'b,S> where Self:'b {
        CharConverter {
            maps: ModifierSeq::script(),
            iter:self
        }
    }
    fn make_bold<'b>(self) -> CharConverter<'b,S> where Self:'b {
        CharConverter {
            maps: ModifierSeq::bold(),
            iter:self
        }
    }
    fn make_smallcaps<'b>(self) -> CharConverter<'b,S> where Self:'b {
        CharConverter {
            maps: ModifierSeq::capitals(),
            iter:self
        }
    }
    fn make_monospaced<'b>(self) -> CharConverter<'b,S> where Self:'b {
        CharConverter {
            maps: ModifierSeq::monospaced(),
            iter:self
        }
    }
    fn make_italic<'b>(self) -> CharConverter<'b,S> where Self:'b {
        CharConverter {
            maps: ModifierSeq::italic(),
            iter:self
        }
    }
    fn make_oblique<'b>(self) -> CharConverter<'b,S> where Self:'b {
        CharConverter {
            maps: ModifierSeq::oblique(),
            iter:self
        }
    }
    fn make_sans<'b>(self) -> CharConverter<'b,S> where Self:'b {
        CharConverter {
            maps: ModifierSeq::sans_serif(),
            iter:self
        }
    }
}

impl<'a,S:AsRef<str>> FontModifiable for CharConverter<'a,S> {
    type R=S;
    fn apply<'b>(mut self, mods: ModifierSeq) -> CharConverter<'b, Self::R> where Self: 'b {
        self.maps = mods;
        self
    }
    fn apply_modifiers<'b>(mut self,mods:&'b [FontModifier]) -> CharConverter<'b,S> where Self:'b {
        for m in mods {
            self.maps.add(*m);
        }
        self
    }
    fn make_blackboard<'b>(mut self) -> CharConverter<'b,S> where Self:'b {
        self.maps.add(FontModifier::Blackboard);
        self
    }
    fn make_fraktur<'b>(mut self) -> CharConverter<'b,S> where Self:'b {
        self.maps.add(FontModifier::Fraktur);
        self
    }
    fn make_script<'b>(mut self) -> CharConverter<'b,S> where Self:'b {
        self.maps.add(FontModifier::Script);
        self
    }
    fn make_bold<'b>(mut self) -> CharConverter<'b,S> where Self:'b {
        self.maps.add(FontModifier::Bold);
        self
    }
    fn make_smallcaps<'b>(mut self) -> CharConverter<'b,S> where Self:'b {
        self.maps.add(FontModifier::Capitals);
        self
    }
    fn make_monospaced<'b>(mut self) -> CharConverter<'b,S> where Self:'b {
        self.maps.add(FontModifier::Monospaced);
        self
    }
    fn make_italic<'b>(mut self) -> CharConverter<'b,S> where Self:'b {
        self.maps.add(FontModifier::Italic);
        self
    }
    fn make_oblique<'b>(mut self) -> CharConverter<'b,S> where Self:'b {
        self.maps.add(FontModifier::Oblique);
        self
    }
    fn make_sans<'b>(mut self) -> CharConverter<'b,S> where Self:'b {
        self.maps.add(FontModifier::SansSerif);
        self
    }
}

static BLACKBOARD: Map<char,char> = phf_map! {
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    //     => '𝕒𝕓𝕔𝕕𝕖𝕗𝕘𝕙𝕚𝕛𝕜𝕝𝕞𝕟𝕠𝕡𝕢𝕣𝕤𝕥𝕦𝕧𝕨𝕩𝕪𝕫𝔸𝔹ℂ𝔻𝔼𝔽𝔾ℍ𝕀𝕁𝕂𝕃𝕄ℕ𝕆ℙℚℝ𝕊𝕋𝕌𝕍𝕎𝕏𝕐ℤ𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡'
    'a' => '𝕒','b' => '𝕓','c' => '𝕔','d' => '𝕕','e' => '𝕖','f' => '𝕗','g' => '𝕘',
    'h' => '𝕙','i' => '𝕚','j' => '𝕛','k' => '𝕜','l' => '𝕝','m' => '𝕞','n' => '𝕟',
    'o' => '𝕠','p' => '𝕡','q' => '𝕢','r' => '𝕣','s' => '𝕤','t' => '𝕥','u' => '𝕦',
    'v' => '𝕧','w' => '𝕨','x' => '𝕩','y' => '𝕪','z' => '𝕫','A' => '𝔸','B' => '𝔹',
    'C' => 'ℂ','D' => '𝔻','E' => '𝔼','F' => '𝔽','G' => '𝔾','H' => 'ℍ','I' => '𝕀',
    'J' => '𝕁','K' => '𝕂','L' => '𝕃','M' => '𝕄','N' => 'ℕ','O' => '𝕆','P' => 'ℙ',
    'Q' => 'ℚ','R' => 'ℝ','S' => '𝕊','T' => '𝕋','U' => '𝕌','V' => '𝕍','W' => '𝕎',
    'X' => '𝕏','Y' => '𝕐','Z' => 'ℤ','0' => '𝟘','1' => '𝟙','2' => '𝟚','3' => '𝟛',
    '4' => '𝟜','5' => '𝟝','6' => '𝟞','7' => '𝟟','8' => '𝟠','9' => '𝟡'
};

static MONOSPACED: Map<char,char> = phf_map! {
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    //     => '𝚊𝚋𝚌𝚍𝚎𝚏𝚐𝚑𝚒𝚓𝚔𝚕𝚖𝚗𝚘𝚙𝚚𝚛𝚜𝚝𝚞𝚟𝚠𝚡𝚢𝚣𝙰𝙱𝙲𝙳𝙴𝙵𝙶𝙷𝙸𝙹𝙺𝙻𝙼𝙽𝙾𝙿𝚀𝚁𝚂𝚃𝚄𝚅𝚆𝚇𝚈𝚉0𝟷𝟸𝟹𝟺𝟻𝟼𝟽𝟾𝟿'
    'a' => '𝚊','b' => '𝚋','c' => '𝚌','d' => '𝚍','e' => '𝚎','f' => '𝚏','g' => '𝚐',
    'h' => '𝚑','i' => '𝚒','j' => '𝚓','k' => '𝚔','l' => '𝚕','m' => '𝚖','n' => '𝚗',
    'o' => '𝚘','p' => '𝚙','q' => '𝚚','r' => '𝚛','s' => '𝚜','t' => '𝚝','u' => '𝚞',
    'v' => '𝚟','w' => '𝚠','x' => '𝚡','y' => '𝚢','z' => '𝚣','A' => '𝙰','B' => '𝙱',
    'C' => '𝙲','D' => '𝙳','E' => '𝙴','F' => '𝙵','G' => '𝙶','H' => '𝙷','I' => '𝙸',
    'J' => '𝙹','K' => '𝙺','L' => '𝙻','M' => '𝙼','N' => '𝙽','O' => '𝙾','P' => '𝙿',
    'Q' => '𝚀','R' => '𝚁','S' => '𝚂','T' => '𝚃','U' => '𝚄','V' => '𝚅','W' => '𝚆',
    'X' => '𝚇','Y' => '𝚈','Z' => '𝚉','0' => '𝟶','1' => '𝟷','2' => '𝟸','3' => '𝟹',
    '4' => '𝟺','5' => '𝟻','6' => '𝟼','7' => '𝟽','8' => '𝟾','9' => '𝟿'
};

static CAPITAL: Map<char,char> = phf_map! {
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    //     => 'ᴀʙᴄᴅᴇғɢʜɪᴊᴋʟᴍɴᴏᴘǫʀsᴛᴜᴠᴡxʏᴢ𝖠𝖡𝖢𝖣𝖤𝖥𝖦𝖧𝖨𝖩𝖪𝖫𝖬𝖭𝖮𝖯𝖰𝖱𝖲𝖳𝖴𝖵𝖶𝖷𝖸𝖹'
    'a' => 'ᴀ','b' => 'ʙ','c' => 'ᴄ','d' => 'ᴅ','e' => 'ᴇ','f' => 'ғ','g' => 'ɢ',
    'h' => 'ʜ','i' => 'ɪ','j' => 'ᴊ','k' => 'ᴋ','l' => 'ʟ','m' => 'ᴍ','n' => 'ɴ',
    'o' => 'ᴏ','p' => 'ǫ','q' => 'ǫ','r' => 'ʀ','s' => 's','t' => 'ᴛ','u' => 'ᴜ',
    'v' => 'ᴠ','w' => 'ᴡ','x' => 'x','y' => 'ʏ','z' => 'ᴢ','A' => '𝖠','B' => '𝖡',
    'C' => '𝖢','D' => '𝖣','E' => '𝖤','F' => '𝖥','G' => '𝖦','H' => '𝖧','I' => '𝖨',
    'J' => '𝖩','K' => '𝖪','L' => '𝖫','M' => '𝖬','N' => '𝖭','O' => '𝖮','P' => '𝖯',
    'Q' => '𝖰','R' => '𝖱','S' => '𝖲','T' => '𝖳','U' => '𝖴','V' => '𝖵','W' => '𝖶',
    'X' => '𝖷','Y' => '𝖸','Z' => '𝖹'
};

static SCRIPT: Map<char,char> = phf_map! {
     // roman
     //'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
     //     => '𝒶𝒷𝒸𝒹ℯ𝒻ℊ𝒽𝒾𝒿𝓀𝓁𝓂𝓃ℴ𝓅𝓆𝓇𝓈𝓉𝓊𝓋𝓌𝓍𝓎𝓏𝒜ℬ𝒞𝒟ℰℱ𝒢ℋℐ𝒥𝒦ℒℳ𝒩𝒪𝒫𝒬ℛ𝒮𝒯𝒰𝒱𝒲𝒳𝒴𝒵'
    'a' => '𝒶','b' => '𝒷','c' => '𝒸','d' => '𝒹','e' => 'ℯ','f' => '𝒻','g' => 'ℊ',
    'h' => '𝒽','i' => '𝒾','j' => '𝒿','k' => '𝓀','l' => '𝓁','m' => '𝓂','n' => '𝓃',
    'o' => 'ℴ','p' => '𝓅','q' => '𝓆','r' => '𝓇','s' => '𝓈','t' => '𝓉','u' => '𝓊',
    'v' => '𝓋','w' => '𝓌','x' => '𝓍','y' => '𝓎','z' => '𝓏','A' => '𝒜','B' => 'ℬ',
    'C' => '𝒞','D' => '𝒟','E' => 'ℰ','F' => 'ℱ','G' => '𝒢','H' => 'ℋ','I' => 'ℐ',
    'J' => '𝒥','K' => '𝒦','L' => 'ℒ','M' => 'ℳ','N' => '𝒩','O' => '𝒪','P' => '𝒫',
    'Q' => '𝒬','R' => 'ℛ','S' => '𝒮','T' => '𝒯','U' => '𝒰','V' => '𝒱','W' => '𝒲',
    'X' => '𝒳','Y' => '𝒴','Z' => '𝒵',
    // bold
    // '𝐚𝐛𝐜𝐝𝐞𝐟𝐠𝐡𝐢𝐣𝐤𝐥𝐦𝐧𝐨𝐩𝐪𝐫𝐬𝐭𝐮𝐯𝐰𝐱𝐲𝐳𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇𝐈𝐉𝐊𝐋𝐌𝐍𝐎𝐏𝐐𝐑𝐒𝐓𝐔𝐕𝐖𝐗𝐘𝐙'
    // => '𝓪𝓫𝓬𝓭𝓮𝓯𝓰𝓱𝓲𝓳𝓴𝓵𝓶𝓷𝓸𝓹𝓺𝓻𝓼𝓽𝓾𝓿𝔀𝔁𝔂𝔃𝓐𝓑𝓒𝓓𝓔𝓕𝓖𝓗𝓘𝓙𝓚𝓛𝓜𝓝𝓞𝓟𝓠𝓡𝓢𝓣𝓤𝓥𝓦𝓧𝓨𝓩'
    '𝐚' => '𝓪', '𝐛' => '𝓫', '𝐜' => '𝓬', '𝐝' => '𝓭', '𝐞' => '𝓮', '𝐟' => '𝓯', '𝐠' => '𝓰',
    '𝐡' => '𝓱', '𝐢' => '𝓲', '𝐣' => '𝓳', '𝐤' => '𝓴', '𝐥' => '𝓵', '𝐦' => '𝓶', '𝐧' => '𝓷',
    '𝐨' => '𝓸', '𝐩' => '𝓹', '𝐪' => '𝓺', '𝐫' => '𝓻', '𝐬' => '𝓼', '𝐭' => '𝓽', '𝐮' => '𝓾',
    '𝐯' => '𝓿', '𝐰' => '𝔀', '𝐱' => '𝔁', '𝐲' => '𝔂', '𝐳' => '𝔃', '𝐀' => '𝓐', '𝐁' => '𝓑',
    '𝐂' => '𝓒', '𝐃' => '𝓓', '𝐄' => '𝓔', '𝐅' => '𝓕', '𝐆' => '𝓖', '𝐇' => '𝓗', '𝐈' => '𝓘',
    '𝐉' => '𝓙', '𝐊' => '𝓚', '𝐋' => '𝓛', '𝐌' => '𝓜', '𝐍' => '𝓝', '𝐎' => '𝓞', '𝐏' => '𝓟',
    '𝐐' => '𝓠', '𝐑' => '𝓡', '𝐒' => '𝓢', '𝐓' => '𝓣', '𝐔' => '𝓤', '𝐕' => '𝓥', '𝐖' => '𝓦',
    '𝐗' => '𝓧', '𝐘' => '𝓨', '𝐙' => '𝓩'
};

static FRAKTUR: Map<char,char> = phf_map! {
    // roman
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    //     => '𝔞𝔟𝔠𝔡𝔢𝔣𝔤𝔥𝔦𝔧𝔨𝔩𝔪𝔫𝔬𝔭𝔮𝔯𝔰𝔱𝔲𝔳𝔴𝔵𝔶𝔷𝔄𝔅ℭ𝔇𝔈𝔉𝔊ℌℑ𝔍𝔎𝔏𝔐𝔑𝔒𝔓𝔔ℜ𝔖𝔗𝔘𝔙𝔚𝔛𝔜ℨ'
    'a' => '𝔞','b' => '𝔟','c' => '𝔠','d' => '𝔡','e' => '𝔢','f' => '𝔣','g' => '𝔤',
    'h' => '𝔥','i' => '𝔦','j' => '𝔧','k' => '𝔨','l' => '𝔩','m' => '𝔪','n' => '𝔫',
    'o' => '𝔬','p' => '𝔭','q' => '𝔮','r' => '𝔯','s' => '𝔰','t' => '𝔱','u' => '𝔲',
    'v' => '𝔳','w' => '𝔴','x' => '𝔵','y' => '𝔶','z' => '𝔷','A' => '𝔄','B' => '𝔅',
    'C' => 'ℭ','D' => '𝔇','E' => '𝔈','F' => '𝔉','G' => '𝔊','H' => 'ℌ','I' => 'ℑ',
    'J' => '𝔍','K' => '𝔎','L' => '𝔏','M' => '𝔐','N' => '𝔑','O' => '𝔒','P' => '𝔓',
    'Q' => '𝔔','R' => 'ℜ','S' => '𝔖','T' => '𝔗','U' => '𝔘','V' => '𝔙','W' => '𝔚',
    'X' => '𝔛','Y' => '𝔜','Z' => 'ℨ',
    // bold
    // '𝐚𝐛𝐜𝐝𝐞𝐟𝐠𝐡𝐢𝐣𝐤𝐥𝐦𝐧𝐨𝐩𝐪𝐫𝐬𝐭𝐮𝐯𝐰𝐱𝐲𝐳𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇𝐈𝐉𝐊𝐋𝐌𝐍𝐎𝐏𝐐𝐑𝐒𝐓𝐔𝐕𝐖𝐗𝐘𝐙'
    //     => '𝖆𝖇𝖈𝖉𝖊𝖋𝖌𝖍𝖎𝖏𝖐𝖑𝖒𝖓𝖔𝖕𝖖𝖗𝖘𝖙𝖚𝖛𝖜𝖝𝖞𝖟𝕬𝕭𝕮𝕯𝕰𝕱𝕲𝕳𝕴𝕵𝕶𝕷𝕸𝕹𝕺𝕻𝕼𝕽𝕾𝕿𝖀𝖁𝖂𝖃𝖄𝖅'
    '𝐚' => '𝖆','𝐛' => '𝖇','𝐜' => '𝖈','𝐝' => '𝖉','𝐞' => '𝖊','𝐟' => '𝖋','𝐠' => '𝖌',
    '𝐡' => '𝖍','𝐢' => '𝖎','𝐣' => '𝖏','𝐤' => '𝖐','𝐥' => '𝖑','𝐦' => '𝖒','𝐧' => '𝖓',
    '𝐨' => '𝖔','𝐩' => '𝖕','𝐪' => '𝖖','𝐫' => '𝖗','𝐬' => '𝖘','𝐭' => '𝖙','𝐮' => '𝖚',
    '𝐯' => '𝖛','𝐰' => '𝖜','𝐱' => '𝖝','𝐲' => '𝖞','𝐳' => '𝖟','𝐀' => '𝕬','𝐁' => '𝕭',
    '𝐂' => '𝕮','𝐃' => '𝕯','𝐄' => '𝕰','𝐅' => '𝕱','𝐆' => '𝕲','𝐇' => '𝕳','𝐈' => '𝕴',
    '𝐉' => '𝕵','𝐊' => '𝕶','𝐋' => '𝕷','𝐌' => '𝕸','𝐍' => '𝕹','𝐎' => '𝕺','𝐏' => '𝕻',
    '𝐐' => '𝕼','𝐑' => '𝕽','𝐒' => '𝕾','𝐓' => '𝕿','𝐔' => '𝖀','𝐕' => '𝖁','𝐖' => '𝖂',
    '𝐗' => '𝖃','𝐘' => '𝖄','𝐙' => '𝖅'
};

static SANS: Map<char,char> = phf_map! {
    // roman
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    //     => '𝖺𝖻𝖼𝖽𝖾𝖿𝗀𝗁𝗂𝗃𝗄𝗅𝗆𝗇𝗈𝗉𝗊𝗋𝗌𝗍𝗎𝗏𝗐𝗑𝗒𝗓𝖠𝖡𝖢𝖣𝖤𝖥𝖦𝖧𝖨𝖩𝖪𝖫𝖬𝖭𝖮𝖯𝖰𝖱𝖲𝖳𝖴𝖵𝖶𝖷𝖸𝖹𝟢𝟣𝟤𝟥𝟦𝟧𝟨𝟩𝟪𝟫'
    'a' => '𝖺','b' => '𝖻','c' => '𝖼','d' => '𝖽','e' => '𝖾','f' => '𝖿','g' => '𝗀',
    'h' => '𝗁','i' => '𝗂','j' => '𝗃','k' => '𝗄','l' => '𝗅','m' => '𝗆','n' => '𝗇',
    'o' => '𝗈','p' => '𝗉','q' => '𝗊','r' => '𝗋','s' => '𝗌','t' => '𝗍','u' => '𝗎',
    'v' => '𝗏','w' => '𝗐','x' => '𝗑','y' => '𝗒','z' => '𝗓','A' => '𝖠','B' => '𝖡',
    'C' => '𝖢','D' => '𝖣','E' => '𝖤','F' => '𝖥','G' => '𝖦','H' => '𝖧','I' => '𝖨',
    'J' => '𝖩','K' => '𝖪','L' => '𝖫','M' => '𝖬','N' => '𝖭','O' => '𝖮','P' => '𝖯',
    'Q' => '𝖰','R' => '𝖱','S' => '𝖲','T' => '𝖳','U' => '𝖴','V' => '𝖵','W' => '𝖶',
    'X' => '𝖷','Y' => '𝖸','Z' => '𝖹','0' => '𝟢','1' => '𝟣','2' => '𝟤','3' => '𝟥',
    '4' => '𝟦','5' => '𝟧','6' => '𝟨','7' => '𝟩','8' => '𝟪','9' => '𝟫',
    // bold
    //  '𝐚𝐛𝐜𝐝𝐞𝐟𝐠𝐡𝐢𝐣𝐤𝐥𝐦𝐧𝐨𝐩𝐪𝐫𝐬𝐭𝐮𝐯𝐰𝐱𝐲𝐳𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇𝐈𝐉𝐊𝐋𝐌𝐍𝐎𝐏𝐐𝐑𝐒𝐓𝐔𝐕𝐖𝐗𝐘𝐙𝟎𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖𝟗𝚪𝚫𝚯𝚲𝚵𝚷𝚹𝚺𝚼𝚽𝚿𝛀𝛂𝛃𝛄𝛅𝛆𝛇𝛈𝛉𝛊𝛋𝛌𝛍𝛎𝛏𝛑𝛒𝛔𝛕𝛖𝛗𝛘𝛙𝛚𝛛𝛜𝛝𝛞𝛟𝛠𝛡'
    //     => '𝗮𝗯𝗰𝗱𝗲𝗳𝗴𝗵𝗶𝗷𝗸𝗹𝗺𝗻𝗼𝗽𝗾𝗿𝘀𝘁𝘂𝘃𝘄𝘅𝘆𝘇𝗔𝗕𝗖𝗗𝗘𝗙𝗚𝗛𝗜𝗝𝗞𝗟𝗠𝗡𝗢𝗣𝗤𝗥𝗦𝗧𝗨𝗩𝗪𝗫𝗬𝗭𝟬𝟭𝟮𝟯𝟰𝟱𝟲𝟳𝟴𝟵𝝘𝝙𝝝𝝠𝝣𝝥𝝧𝝨𝝪𝝫𝝭𝝮𝝰𝝱𝝲𝝳𝝴𝝵𝝶𝝷𝝸𝝹𝝺𝝻𝝼𝝽𝝿𝞀𝞂𝞃𝞄𝞅𝞆𝞇𝞈𝞉𝞊𝞋𝞌𝞍𝞎𝞏'
    '𝐚' => '𝗮','𝐛' => '𝗯','𝐜' => '𝗰','𝐝' => '𝗱','𝐞' => '𝗲','𝐟' => '𝗳','𝐠' => '𝗴',
    '𝐡' => '𝗵','𝐢' => '𝗶','𝐣' => '𝗷','𝐤' => '𝗸','𝐥' => '𝗹','𝐦' => '𝗺','𝐧' => '𝗻',
    '𝐨' => '𝗼','𝐩' => '𝗽','𝐪' => '𝗾','𝐫' => '𝗿','𝐬' => '𝘀','𝐭' => '𝘁','𝐮' => '𝘂',
    '𝐯' => '𝘃','𝐰' => '𝘄','𝐱' => '𝘅','𝐲' => '𝘆','𝐳' => '𝘇','𝐀' => '𝗔','𝐁' => '𝗕',
    '𝐂' => '𝗖','𝐃' => '𝗗','𝐄' => '𝗘','𝐅' => '𝗙','𝐆' => '𝗚','𝐇' => '𝗛','𝐈' => '𝗜',
    '𝐉' => '𝗝','𝐊' => '𝗞','𝐋' => '𝗟','𝐌' => '𝗠','𝐍' => '𝗡','𝐎' => '𝗢','𝐏' => '𝗣',
    '𝐐' => '𝗤','𝐑' => '𝗥','𝐒' => '𝗦','𝐓' => '𝗧','𝐔' => '𝗨','𝐕' => '𝗩','𝐖' => '𝗪',
    '𝐗' => '𝗫','𝐘' => '𝗬','𝐙' => '𝗭','𝟎' => '𝟬','𝟏' => '𝟭','𝟐' => '𝟮','𝟑' => '𝟯',
    '𝟒' => '𝟰','𝟓' => '𝟱','𝟔' => '𝟲','𝟕' => '𝟳','𝟖' => '𝟴','𝟗' => '𝟵','𝚪' => '𝝘',
    '𝚫' => '𝝙','𝚯' => '𝝝','𝚲' => '𝝠','𝚵' => '𝝣','𝚷' => '𝝥','𝚹' => '𝝧','𝚺' => '𝝨',
    '𝚼' => '𝝪','𝚽' => '𝝫','𝚿' => '𝝭','𝛀' => '𝝮','𝛂' => '𝝰','𝛃' => '𝝱','𝛄' => '𝝲',
    '𝛅' => '𝝳','𝛆' => '𝝴','𝛇' => '𝝵','𝛈' => '𝝶','𝛉' => '𝝷','𝛊' => '𝝸','𝛋' => '𝝹',
    '𝛌' => '𝝺','𝛍' => '𝝻','𝛎' => '𝝼','𝛏' => '𝝽','𝛑' => '𝝿','𝛒' => '𝞀','𝛔' => '𝞂',
    '𝛕' => '𝞃','𝛖' => '𝞄','𝛗' => '𝞅','𝛘' => '𝞆','𝛙' => '𝞇','𝛚' => '𝞈','𝛛' => '𝞉',
    '𝛜' => '𝞊','𝛝' => '𝞋','𝛞' => '𝞌','𝛟' => '𝞍','𝛠' => '𝞎','𝛡' => '𝞏',
    // italic
    // '𝑎𝑏𝑐𝑑𝑒𝑓𝑔ℎ𝑖𝑗𝑘𝑙𝑚𝑛𝑜𝑝𝑞𝑟𝑠𝑡𝑢𝑣𝑤𝑥𝑦𝑧𝐴𝐵𝐶𝐷𝐸𝐹𝐺𝐻𝐼𝐽𝐾𝐿𝑀𝑁𝑂𝑃𝑄𝑅𝑆𝑇𝑈𝑉𝑊𝑋𝑌𝑍'
    //     => '𝘢𝘣𝘤𝘥𝘦𝘧𝘨𝘩𝘪𝘫𝘬𝘭𝘮𝘯𝘰𝘱𝘲𝘳𝘴𝘵𝘶𝘷𝘸𝘹𝘺𝘻𝘈𝘉𝘊𝘋𝘌𝘍𝘎𝘏𝘐𝘑𝘒𝘓𝘔𝘕𝘖𝘗𝘘𝘙𝘚𝘛𝘜𝘝𝘞𝘟𝘠𝘡'
    '𝑎' => '𝘢','𝑏' => '𝘣','𝑐' => '𝘤','𝑑' => '𝘥','𝑒' => '𝘦','𝑓' => '𝘧','𝑔' => '𝘨',
    'ℎ' => '𝘩','𝑖' => '𝘪','𝑗' => '𝘫','𝑘' => '𝘬','𝑙' => '𝘭','𝑚' => '𝘮','𝑛' => '𝘯',
    '𝑜' => '𝘰','𝑝' => '𝘱','𝑞' => '𝘲','𝑟' => '𝘳','𝑠' => '𝘴','𝑡' => '𝘵','𝑢' => '𝘶',
    '𝑣' => '𝘷','𝑤' => '𝘸','𝑥' => '𝘹','𝑦' => '𝘺','𝑧' => '𝘻','𝐴' => '𝘈','𝐵' => '𝘉',
    '𝐶' => '𝘊','𝐷' => '𝘋','𝐸' => '𝘌','𝐹' => '𝘍','𝐺' => '𝘎','𝐻' => '𝘏','𝐼' => '𝘐',
    '𝐽' => '𝘑','𝐾' => '𝘒','𝐿' => '𝘓','𝑀' => '𝘔','𝑁' => '𝘕','𝑂' => '𝘖','𝑃' => '𝘗',
    '𝑄' => '𝘘','𝑅' => '𝘙','𝑆' => '𝘚','𝑇' => '𝘛','𝑈' => '𝘜','𝑉' => '𝘝','𝑊' => '𝘞',
    '𝑋' => '𝘟','𝑌' => '𝘠','𝑍' => '𝘡',
    // bold italic
    //  '𝒂𝒃𝒄𝒅𝒆𝒇𝒈𝒉𝒊𝒋𝒌𝒍𝒎𝒏𝒐𝒑𝒒𝒓𝒔𝒕𝒖𝒗𝒘𝒙𝒚𝒛𝑨𝑩𝑪𝑫𝑬𝑭𝑮𝑯𝑰𝑱𝑲𝑳𝑴𝑵𝑶𝑷𝑸𝑹𝑺𝑻𝑼𝑽𝑾𝑿𝒀𝒁𝜞𝜟𝜣𝜦𝜩𝜫𝜭𝜮𝜰𝜱𝜳𝜴𝜶𝜷𝜸𝜹𝜺𝜻𝜼𝜽𝜾𝜿𝝀𝝁𝝂𝝃𝝅𝝆𝝈𝝉𝝊𝝋𝝌𝝍𝝎𝝏𝝐𝝑𝝒𝝓𝝔𝝕'
    //     => '𝙖𝙗𝙘𝙙𝙚𝙛𝙜𝙝𝙞𝙟𝙠𝙡𝙢𝙣𝙤𝙥𝙦𝙧𝙨𝙩𝙪𝙫𝙬𝙭𝙮𝙯𝘼𝘽𝘾𝘿𝙀𝙁𝙂𝙃𝙄𝙅𝙆𝙇𝙈𝙉𝙊𝙋𝙌𝙍𝙎𝙏𝙐𝙑𝙒𝙓𝙔𝙕𝞒𝞓𝞗𝞚𝞝𝞟𝞡𝞢𝞤𝞥𝞧𝞨𝞪𝞫𝞬𝞭𝞮𝞯𝞰𝞱𝞲𝞳𝞴𝞵𝞶𝞷𝞹𝞺𝞼𝞽𝞾𝞿𝟀𝟁𝟂𝟃𝟄𝟅𝟆𝟇𝟈𝟉'
    '𝒂' => '𝙖','𝒃' => '𝙗','𝒄' => '𝙘','𝒅' => '𝙙','𝒆' => '𝙚','𝒇' => '𝙛','𝒈' => '𝙜',
    '𝒉' => '𝙝','𝒊' => '𝙞','𝒋' => '𝙟','𝒌' => '𝙠','𝒍' => '𝙡','𝒎' => '𝙢','𝒏' => '𝙣',
    '𝒐' => '𝙤','𝒑' => '𝙥','𝒒' => '𝙦','𝒓' => '𝙧','𝒔' => '𝙨','𝒕' => '𝙩','𝒖' => '𝙪',
    '𝒗' => '𝙫','𝒘' => '𝙬','𝒙' => '𝙭','𝒚' => '𝙮','𝒛' => '𝙯','𝑨' => '𝘼','𝑩' => '𝘽',
    '𝑪' => '𝘾','𝑫' => '𝘿','𝑬' => '𝙀','𝑭' => '𝙁','𝑮' => '𝙂','𝑯' => '𝙃','𝑰' => '𝙄',
    '𝑱' => '𝙅','𝑲' => '𝙆','𝑳' => '𝙇','𝑴' => '𝙈','𝑵' => '𝙉','𝑶' => '𝙊','𝑷' => '𝙋',
    '𝑸' => '𝙌','𝑹' => '𝙍','𝑺' => '𝙎','𝑻' => '𝙏','𝑼' => '𝙐','𝑽' => '𝙑','𝑾' => '𝙒',
    '𝑿' => '𝙓','𝒀' => '𝙔','𝒁' => '𝙕','𝜞' => '𝞒','𝜟' => '𝞓','𝜣' => '𝞗','𝜦' => '𝞚',
    '𝜩' => '𝞝','𝜫' => '𝞟','𝜭' => '𝞡','𝜮' => '𝞢','𝜰' => '𝞤','𝜱' => '𝞥','𝜳' => '𝞧',
    '𝜴' => '𝞨','𝜶' => '𝞪','𝜷' => '𝞫','𝜸' => '𝞬','𝜹' => '𝞭','𝜺' => '𝞮','𝜻' => '𝞯',
    '𝜼' => '𝞰','𝜽' => '𝞱','𝜾' => '𝞲','𝜿' => '𝞳','𝝀' => '𝞴','𝝁' => '𝞵','𝝂' => '𝞶',
    '𝝃' => '𝞷','𝝅' => '𝞹','𝝆' => '𝞺','𝝈' => '𝞼','𝝉' => '𝞽','𝝊' => '𝞾','𝝋' => '𝞿',
    '𝝌' => '𝟀','𝝍' => '𝟁','𝝎' => '𝟂','𝝏' => '𝟃','𝝐' => '𝟄','𝝑' => '𝟅','𝝒' => '𝟆',
    '𝝓' => '𝟇','𝝔' => '𝟈','𝝕' => '𝟉',
};

static BOLD: Map<char,char> = phf_map! {
    // roman
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789Γ∆ΘΛΞΠϴΣΥΦΨΩαβγδεζηθικλμνξπρστυφχψω∂ϵϑϰϕϱϖ'
    //     => '𝐚𝐛𝐜𝐝𝐞𝐟𝐠𝐡𝐢𝐣𝐤𝐥𝐦𝐧𝐨𝐩𝐪𝐫𝐬𝐭𝐮𝐯𝐰𝐱𝐲𝐳𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇𝐈𝐉𝐊𝐋𝐌𝐍𝐎𝐏𝐐𝐑𝐒𝐓𝐔𝐕𝐖𝐗𝐘𝐙𝟎𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖𝟗𝚪𝚫𝚯𝚲𝚵𝚷𝚹𝚺𝚼𝚽𝚿𝛀𝛂𝛃𝛄𝛅𝛆𝛇𝛈𝛉𝛊𝛋𝛌𝛍𝛎𝛏𝛑𝛒𝛔𝛕𝛖𝛗𝛘𝛙𝛚𝛛𝛜𝛝𝛞𝛟𝛠𝛡'
    'a' => '𝐚','b' => '𝐛','c' => '𝐜','d' => '𝐝','e' => '𝐞','f' => '𝐟','g' => '𝐠',
    'h' => '𝐡','i' => '𝐢','j' => '𝐣','k' => '𝐤','l' => '𝐥','m' => '𝐦','n' => '𝐧',
    'o' => '𝐨','p' => '𝐩','q' => '𝐪','r' => '𝐫','s' => '𝐬','t' => '𝐭','u' => '𝐮',
    'v' => '𝐯','w' => '𝐰','x' => '𝐱','y' => '𝐲','z' => '𝐳','A' => '𝐀','B' => '𝐁',
    'C' => '𝐂','D' => '𝐃','E' => '𝐄','F' => '𝐅','G' => '𝐆','H' => '𝐇','I' => '𝐈',
    'J' => '𝐉','K' => '𝐊','L' => '𝐋','M' => '𝐌','N' => '𝐍','O' => '𝐎','P' => '𝐏',
    'Q' => '𝐐','R' => '𝐑','S' => '𝐒','T' => '𝐓','U' => '𝐔','V' => '𝐕','W' => '𝐖',
    'X' => '𝐗','Y' => '𝐘','Z' => '𝐙','0' => '𝟎','1' => '𝟏','2' => '𝟐','3' => '𝟑',
    '4' => '𝟒','5' => '𝟓','6' => '𝟔','7' => '𝟕','8' => '𝟖','9' => '𝟗','Γ' => '𝚪',
    '∆' => '𝚫','Θ' => '𝚯','Λ' => '𝚲','Ξ' => '𝚵','Π' => '𝚷','ϴ' => '𝚹','Σ' => '𝚺',
    'Υ' => '𝚼','Φ' => '𝚽','Ψ' => '𝚿','Ω' => '𝛀','α' => '𝛂','β' => '𝛃','γ' => '𝛄',
    'δ' => '𝛅','ε' => '𝛆','ζ' => '𝛇','η' => '𝛈','θ' => '𝛉','ι' => '𝛊','κ' => '𝛋',
    'λ' => '𝛌','μ' => '𝛍','ν' => '𝛎','ξ' => '𝛏','π' => '𝛑','ρ' => '𝛒','σ' => '𝛔',
    'τ' => '𝛕','υ' => '𝛖','φ' => '𝛗','χ' => '𝛘','ψ' => '𝛙','ω' => '𝛚','∂' => '𝛛',
    'ϵ' => '𝛜','ϑ' => '𝛝','ϰ' => '𝛞','ϕ' => '𝛟','ϱ' => '𝛠','ϖ' => '𝛡',
    // script
    // '𝒶𝒷𝒸𝒹ℯ𝒻ℊ𝒽𝒾𝒿𝓀𝓁𝓂𝓃ℴ𝓅𝓆𝓇𝓈𝓉𝓊𝓋𝓌𝓍𝓎𝓏𝒜ℬ𝒞𝒟ℰℱ𝒢ℋℐ𝒥𝒦ℒℳ𝒩𝒪𝒫𝒬ℛ𝒮𝒯𝒰𝒱𝒲𝒳𝒴𝒵'
    //     => '𝓪𝓫𝓬𝓭𝓮𝓯𝓰𝓱𝓲𝓳𝓴𝓵𝓶𝓷𝓸𝓹𝓺𝓻𝓼𝓽𝓾𝓿𝔀𝔁𝔂𝔃𝓐𝓑𝓒𝓓𝓔𝓕𝓖𝓗𝓘𝓙𝓚𝓛𝓜𝓝𝓞𝓟𝓠𝓡𝓢𝓣𝓤𝓥𝓦𝓧𝓨𝓩'
    '𝒶' => '𝓪','𝒷' => '𝓫','𝒸' => '𝓬','𝒹' => '𝓭','ℯ' => '𝓮','𝒻' => '𝓯','ℊ' => '𝓰',
    '𝒽' => '𝓱','𝒾' => '𝓲','𝒿' => '𝓳','𝓀' => '𝓴','𝓁' => '𝓵','𝓂' => '𝓶','𝓃' => '𝓷',
    'ℴ' => '𝓸','𝓅' => '𝓹','𝓆' => '𝓺','𝓇' => '𝓻','𝓈' => '𝓼','𝓉' => '𝓽','𝓊' => '𝓾',
    '𝓋' => '𝓿','𝓌' => '𝔀','𝓍' => '𝔁','𝓎' => '𝔂','𝓏' => '𝔃','𝒜' => '𝓐','ℬ' => '𝓑',
    '𝒞' => '𝓒','𝒟' => '𝓓','ℰ' => '𝓔','ℱ' => '𝓕','𝒢' => '𝓖','ℋ' => '𝓗','ℐ' => '𝓘',
    '𝒥' => '𝓙','𝒦' => '𝓚','ℒ' => '𝓛','ℳ' => '𝓜','𝒩' => '𝓝','𝒪' => '𝓞','𝒫' => '𝓟',
    '𝒬' => '𝓠','ℛ' => '𝓡','𝒮' => '𝓢','𝒯' => '𝓣','𝒰' => '𝓤','𝒱' => '𝓥','𝒲' => '𝓦',
    '𝒳' => '𝓧','𝒴' => '𝓨','𝒵' => '𝓩',
    // italic
    // '𝑎𝑏𝑐𝑑𝑒𝑓𝑔ℎ𝑖𝑗𝑘𝑙𝑚𝑛𝑜𝑝𝑞𝑟𝑠𝑡𝑢𝑣𝑤𝑥𝑦𝑧𝐴𝐵𝐶𝐷𝐸𝐹𝐺𝐻𝐼𝐽𝐾𝐿𝑀𝑁𝑂𝑃𝑄𝑅𝑆𝑇𝑈𝑉𝑊𝑋𝑌𝑍𝛤𝛥𝛩𝛬𝛯𝛱𝛳𝛴𝛶𝛷𝛹𝛺𝛼𝛽𝛾𝛿𝜀𝜁𝜂𝜃𝜄𝜅𝜆𝜇𝜈𝜉𝜋𝜌𝜎𝜏𝜐𝜑𝜒𝜓𝜔𝜕𝜖𝜗𝜘𝜙𝜚𝜛'
    //     => '𝒂𝒃𝒄𝒅𝒆𝒇𝒈𝒉𝒊𝒋𝒌𝒍𝒎𝒏𝒐𝒑𝒒𝒓𝒔𝒕𝒖𝒗𝒘𝒙𝒚𝒛𝑨𝑩𝑪𝑫𝑬𝑭𝑮𝑯𝑰𝑱𝑲𝑳𝑴𝑵𝑶𝑷𝑸𝑹𝑺𝑻𝑼𝑽𝑾𝑿𝒀𝒁𝜞𝜟𝜣𝜦𝜩𝜫𝜭𝜮𝜰𝜱𝜳𝜴𝜶𝜷𝜸𝜹𝜺𝜻𝜼𝜽𝜾𝜿𝝀𝝁𝝂𝝃𝝅𝝆𝝈𝝉𝝊𝝋𝝌𝝍𝝎𝝏𝝐𝝑𝝒𝝓𝝔𝝕'
    '𝑎' => '𝒂','𝑏' => '𝒃','𝑐' => '𝒄','𝑑' => '𝒅','𝑒' => '𝒆','𝑓' => '𝒇','𝑔' => '𝒈',
    'ℎ' => '𝒉','𝑖' => '𝒊','𝑗' => '𝒋','𝑘' => '𝒌','𝑙' => '𝒍','𝑚' => '𝒎','𝑛' => '𝒏',
    '𝑜' => '𝒐','𝑝' => '𝒑','𝑞' => '𝒒','𝑟' => '𝒓','𝑠' => '𝒔','𝑡' => '𝒕','𝑢' => '𝒖',
    '𝑣' => '𝒗','𝑤' => '𝒘','𝑥' => '𝒙','𝑦' => '𝒚','𝑧' => '𝒛','𝐴' => '𝑨','𝐵' => '𝑩',
    '𝐶' => '𝑪','𝐷' => '𝑫','𝐸' => '𝑬','𝐹' => '𝑭','𝐺' => '𝑮','𝐻' => '𝑯','𝐼' => '𝑰',
    '𝐽' => '𝑱','𝐾' => '𝑲','𝐿' => '𝑳','𝑀' => '𝑴','𝑁' => '𝑵','𝑂' => '𝑶','𝑃' => '𝑷',
    '𝑄' => '𝑸','𝑅' => '𝑹','𝑆' => '𝑺','𝑇' => '𝑻','𝑈' => '𝑼','𝑉' => '𝑽','𝑊' => '𝑾',
    '𝑋' => '𝑿','𝑌' => '𝒀','𝑍' => '𝒁','𝛤' => '𝜞','𝛥' => '𝜟','𝛩' => '𝜣','𝛬' => '𝜦',
    '𝛯' => '𝜩','𝛱' => '𝜫','𝛳' => '𝜭','𝛴' => '𝜮','𝛶' => '𝜰','𝛷' => '𝜱','𝛹' => '𝜳',
    '𝛺' => '𝜴','𝛼' => '𝜶','𝛽' => '𝜷','𝛾' => '𝜸','𝛿' => '𝜹','𝜀' => '𝜺','𝜁' => '𝜻',
    '𝜂' => '𝜼','𝜃' => '𝜽','𝜄' => '𝜾','𝜅' => '𝜿','𝜆' => '𝝀','𝜇' => '𝝁','𝜈' => '𝝂',
    '𝜉' => '𝝃','𝜋' => '𝝅','𝜌' => '𝝆','𝜎' => '𝝈','𝜏' => '𝝉','𝜐' => '𝝊','𝜑' => '𝝋',
    '𝜒' => '𝝌','𝜓' => '𝝍','𝜔' => '𝝎','𝜕' => '𝝏','𝜖' => '𝝐','𝜗' => '𝝑','𝜘' => '𝝒',
    '𝜙' => '𝝓','𝜚' => '𝝔','𝜛' => '𝝕',
    // sans
    // '𝖺𝖻𝖼𝖽𝖾𝖿𝗀𝗁𝗂𝗃𝗄𝗅𝗆𝗇𝗈𝗉𝗊𝗋𝗌𝗍𝗎𝗏𝗐𝗑𝗒𝗓𝖠𝖡𝖢𝖣𝖤𝖥𝖦𝖧𝖨𝖩𝖪𝖫𝖬𝖭𝖮𝖯𝖰𝖱𝖲𝖳𝖴𝖵𝖶𝖷𝖸𝖹𝟢𝟣𝟤𝟥𝟦𝟧𝟨𝟩𝟪𝟫'
    //     => '𝗮𝗯𝗰𝗱𝗲𝗳𝗴𝗵𝗶𝗷𝗸𝗹𝗺𝗻𝗼𝗽𝗾𝗿𝘀𝘁𝘂𝘃𝘄𝘅𝘆𝘇𝗔𝗕𝗖𝗗𝗘𝗙𝗚𝗛𝗜𝗝𝗞𝗟𝗠𝗡𝗢𝗣𝗤𝗥𝗦𝗧𝗨𝗩𝗪𝗫𝗬𝗭𝟬𝟭𝟮𝟯𝟰𝟱𝟲𝟳𝟴𝟵'
    '𝖺' => '𝗮','𝖻' => '𝗯','𝖼' => '𝗰','𝖽' => '𝗱','𝖾' => '𝗲','𝖿' => '𝗳','𝗀' => '𝗴',
    '𝗁' => '𝗵','𝗂' => '𝗶','𝗃' => '𝗷','𝗄' => '𝗸','𝗅' => '𝗹','𝗆' => '𝗺','𝗇' => '𝗻',
    '𝗈' => '𝗼','𝗉' => '𝗽','𝗊' => '𝗾','𝗋' => '𝗿','𝗌' => '𝘀','𝗍' => '𝘁','𝗎' => '𝘂',
    '𝗏' => '𝘃','𝗐' => '𝘄','𝗑' => '𝘅','𝗒' => '𝘆','𝗓' => '𝘇','𝖠' => '𝗔','𝖡' => '𝗕',
    '𝖢' => '𝗖','𝖣' => '𝗗','𝖤' => '𝗘','𝖥' => '𝗙','𝖦' => '𝗚','𝖧' => '𝗛','𝖨' => '𝗜',
    '𝖩' => '𝗝','𝖪' => '𝗞','𝖫' => '𝗟','𝖬' => '𝗠','𝖭' => '𝗡','𝖮' => '𝗢','𝖯' => '𝗣',
    '𝖰' => '𝗤','𝖱' => '𝗥','𝖲' => '𝗦','𝖳' => '𝗧','𝖴' => '𝗨','𝖵' => '𝗩','𝖶' => '𝗪',
    '𝖷' => '𝗫','𝖸' => '𝗬','𝖹' => '𝗭','𝟢' => '𝟬','𝟣' => '𝟭','𝟤' => '𝟮','𝟥' => '𝟯',
    '𝟦' => '𝟰','𝟧' => '𝟱','𝟨' => '𝟲','𝟩' => '𝟳','𝟪' => '𝟴','𝟫' => '𝟵',
    // fraktur
    // '𝔞𝔟𝔠𝔡𝔢𝔣𝔤𝔥𝔦𝔧𝔨𝔩𝔪𝔫𝔬𝔭𝔮𝔯𝔰𝔱𝔲𝔳𝔴𝔵𝔶𝔷𝔄𝔅ℭ𝔇𝔈𝔉𝔊ℌℑ𝔍𝔎𝔏𝔐𝔑𝔒𝔓𝔔ℜ𝔖𝔗𝔘𝔙𝔚𝔛𝔜ℨ'
    //     => '𝖆𝖇𝖈𝖉𝖊𝖋𝖌𝖍𝖎𝖏𝖐𝖑𝖒𝖓𝖔𝖕𝖖𝖗𝖘𝖙𝖚𝖛𝖜𝖝𝖞𝖟𝕬𝕭𝕮𝕯𝕰𝕱𝕲𝕳𝕴𝕵𝕶𝕷𝕸𝕹𝕺𝕻𝕼𝕽𝕾𝕿𝖀𝖁𝖂𝖃𝖄𝖅'
    '𝔞' => '𝖆','𝔟' => '𝖇','𝔠' => '𝖈','𝔡' => '𝖉','𝔢' => '𝖊','𝔣' => '𝖋','𝔤' => '𝖌',
    '𝔥' => '𝖍','𝔦' => '𝖎','𝔧' => '𝖏','𝔨' => '𝖐','𝔩' => '𝖑','𝔪' => '𝖒','𝔫' => '𝖓',
    '𝔬' => '𝖔','𝔭' => '𝖕','𝔮' => '𝖖','𝔯' => '𝖗','𝔰' => '𝖘','𝔱' => '𝖙','𝔲' => '𝖚',
    '𝔳' => '𝖛','𝔴' => '𝖜','𝔵' => '𝖝','𝔶' => '𝖞','𝔷' => '𝖟','𝔄' => '𝕬','𝔅' => '𝕭',
    'ℭ' => '𝕮','𝔇' => '𝕯','𝔈' => '𝕰','𝔉' => '𝕱','𝔊' => '𝕲','ℌ' => '𝕳','ℑ' => '𝕴',
    '𝔍' => '𝕵','𝔎' => '𝕶','𝔏' => '𝕷','𝔐' => '𝕸','𝔑' => '𝕹','𝔒' => '𝕺','𝔓' => '𝕻',
    '𝔔' => '𝕼','ℜ' => '𝕽','𝔖' => '𝕾','𝔗' => '𝕿','𝔘' => '𝖀','𝔙' => '𝖁','𝔚' => '𝖂',
    '𝔛' => '𝖃','𝔜' => '𝖄','ℨ' => '𝖅',
    // italic sans
    // '𝘢𝘣𝘤𝘥𝘦𝘧𝘨𝘩𝘪𝘫𝘬𝘭𝘮𝘯𝘰𝘱𝘲𝘳𝘴𝘵𝘶𝘷𝘸𝘹𝘺𝘻𝘈𝘉𝘊𝘋𝘌𝘍𝘎𝘏𝘐𝘑𝘒𝘓𝘔𝘕𝘖𝘗𝘘𝘙𝘚𝘛𝘜𝘝𝘞𝘟𝘠𝘡'
    //     => '𝙖𝙗𝙘𝙙𝙚𝙛𝙜𝙝𝙞𝙟𝙠𝙡𝙢𝙣𝙤𝙥𝙦𝙧𝙨𝙩𝙪𝙫𝙬𝙭𝙮𝙯𝘼𝘽𝘾𝘿𝙀𝙁𝙂𝙃𝙄𝙅𝙆𝙇𝙈𝙉𝙊𝙋𝙌𝙍𝙎𝙏𝙐𝙑𝙒𝙓𝙔𝙕'
    '𝘢' => '𝙖','𝘣' => '𝙗','𝘤' => '𝙘','𝘥' => '𝙙','𝘦' => '𝙚','𝘧' => '𝙛','𝘨' => '𝙜',
    '𝘩' => '𝙝','𝘪' => '𝙞','𝘫' => '𝙟','𝘬' => '𝙠','𝘭' => '𝙡','𝘮' => '𝙢','𝘯' => '𝙣',
    '𝘰' => '𝙤','𝘱' => '𝙥','𝘲' => '𝙦','𝘳' => '𝙧','𝘴' => '𝙨','𝘵' => '𝙩','𝘶' => '𝙪',
    '𝘷' => '𝙫','𝘸' => '𝙬','𝘹' => '𝙭','𝘺' => '𝙮','𝘻' => '𝙯','𝘈' => '𝘼','𝘉' => '𝘽',
    '𝘊' => '𝘾','𝘋' => '𝘿','𝘌' => '𝙀','𝘍' => '𝙁','𝘎' => '𝙂','𝘏' => '𝙃','𝘐' => '𝙄',
    '𝘑' => '𝙅','𝘒' => '𝙆','𝘓' => '𝙇','𝘔' => '𝙈','𝘕' => '𝙉','𝘖' => '𝙊','𝘗' => '𝙋',
    '𝘘' => '𝙌','𝘙' => '𝙍','𝘚' => '𝙎','𝘛' => '𝙏','𝘜' => '𝙐','𝘝' => '𝙑','𝘞' => '𝙒',
    '𝘟' => '𝙓','𝘠' => '𝙔','𝘡' => '𝙕',
};

static ITALIC: Map<char,char> = phf_map! {
    // roman
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZΓ∆ΘΛΞΠϴΣΥΦΨΩαβγδεζηθικλμνξπρστυφχψω∂ϵϑϰϕϱϖ'
    //     => '𝑎𝑏𝑐𝑑𝑒𝑓𝑔ℎ𝑖𝑗𝑘𝑙𝑚𝑛𝑜𝑝𝑞𝑟𝑠𝑡𝑢𝑣𝑤𝑥𝑦𝑧𝐴𝐵𝐶𝐷𝐸𝐹𝐺𝐻𝐼𝐽𝐾𝐿𝑀𝑁𝑂𝑃𝑄𝑅𝑆𝑇𝑈𝑉𝑊𝑋𝑌𝑍𝛤𝛥𝛩𝛬𝛯𝛱𝛳𝛴𝛶𝛷𝛹𝛺𝛼𝛽𝛾𝛿𝜀𝜁𝜂𝜃𝜄𝜅𝜆𝜇𝜈𝜉𝜋𝜌𝜎𝜏𝜐𝜑𝜒𝜓𝜔𝜕𝜖𝜗𝜘𝜙𝜚𝜛'
    'a' => '𝑎','b' => '𝑏','c' => '𝑐','d' => '𝑑','e' => '𝑒','f' => '𝑓','g' => '𝑔',
    'h' => 'ℎ','i' => '𝑖','j' => '𝑗','k' => '𝑘','l' => '𝑙','m' => '𝑚','n' => '𝑛',
    'o' => '𝑜','p' => '𝑝','q' => '𝑞','r' => '𝑟','s' => '𝑠','t' => '𝑡','u' => '𝑢',
    'v' => '𝑣','w' => '𝑤','x' => '𝑥','y' => '𝑦','z' => '𝑧','A' => '𝐴','B' => '𝐵',
    'C' => '𝐶','D' => '𝐷','E' => '𝐸','F' => '𝐹','G' => '𝐺','H' => '𝐻','I' => '𝐼',
    'J' => '𝐽','K' => '𝐾','L' => '𝐿','M' => '𝑀','N' => '𝑁','O' => '𝑂','P' => '𝑃',
    'Q' => '𝑄','R' => '𝑅','S' => '𝑆','T' => '𝑇','U' => '𝑈','V' => '𝑉','W' => '𝑊',
    'X' => '𝑋','Y' => '𝑌','Z' => '𝑍','Γ' => '𝛤','∆' => '𝛥','Θ' => '𝛩','Λ' => '𝛬',
    'Ξ' => '𝛯','Π' => '𝛱','ϴ' => '𝛳','Σ' => '𝛴','Υ' => '𝛶','Φ' => '𝛷','Ψ' => '𝛹',
    'Ω' => '𝛺','α' => '𝛼','β' => '𝛽','γ' => '𝛾','δ' => '𝛿','ε' => '𝜀','ζ' => '𝜁',
    'η' => '𝜂','θ' => '𝜃','ι' => '𝜄','κ' => '𝜅','λ' => '𝜆','μ' => '𝜇','ν' => '𝜈',
    'ξ' => '𝜉','π' => '𝜋','ρ' => '𝜌','σ' => '𝜎','τ' => '𝜏','υ' => '𝜐','φ' => '𝜑',
    'χ' => '𝜒','ψ' => '𝜓','ω' => '𝜔','∂' => '𝜕','ϵ' => '𝜖','ϑ' => '𝜗','ϰ' => '𝜘',
    'ϕ' => '𝜙','ϱ' => '𝜚','ϖ' => '𝜛',
    // bold
        // '𝐚𝐛𝐜𝐝𝐞𝐟𝐠𝐡𝐢𝐣𝐤𝐥𝐦𝐧𝐨𝐩𝐪𝐫𝐬𝐭𝐮𝐯𝐰𝐱𝐲𝐳𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇𝐈𝐉𝐊𝐋𝐌𝐍𝐎𝐏𝐐𝐑𝐒𝐓𝐔𝐕𝐖𝐗𝐘𝐙𝚪𝚫𝚯𝚲𝚵𝚷𝚹𝚺𝚼𝚽𝚿𝛀𝛂𝛃𝛄𝛅𝛆𝛇𝛈𝛉𝛊𝛋𝛌𝛍𝛎𝛏𝛑𝛒𝛔𝛕𝛖𝛗𝛘𝛙𝛚𝛛𝛜𝛝𝛞𝛟𝛠𝛡'
    //     => '𝒂𝒃𝒄𝒅𝒆𝒇𝒈𝒉𝒊𝒋𝒌𝒍𝒎𝒏𝒐𝒑𝒒𝒓𝒔𝒕𝒖𝒗𝒘𝒙𝒚𝒛𝑨𝑩𝑪𝑫𝑬𝑭𝑮𝑯𝑰𝑱𝑲𝑳𝑴𝑵𝑶𝑷𝑸𝑹𝑺𝑻𝑼𝑽𝑾𝑿𝒀𝒁𝜞𝜟𝜣𝜦𝜩𝜫𝜭𝜮𝜰𝜱𝜳𝜴𝜶𝜷𝜸𝜹𝜺𝜻𝜼𝜽𝜾𝜿𝝀𝝁𝝂𝝃𝝅𝝆𝝈𝝉𝝊𝝋𝝌𝝍𝝎𝝏𝝐𝝑𝝒𝝓𝝔𝝕'
    '𝐚' => '𝒂','𝐛' => '𝒃','𝐜' => '𝒄','𝐝' => '𝒅','𝐞' => '𝒆','𝐟' => '𝒇','𝐠' => '𝒈',
    '𝐡' => '𝒉','𝐢' => '𝒊','𝐣' => '𝒋','𝐤' => '𝒌','𝐥' => '𝒍','𝐦' => '𝒎','𝐧' => '𝒏',
    '𝐨' => '𝒐','𝐩' => '𝒑','𝐪' => '𝒒','𝐫' => '𝒓','𝐬' => '𝒔','𝐭' => '𝒕','𝐮' => '𝒖',
    '𝐯' => '𝒗','𝐰' => '𝒘','𝐱' => '𝒙','𝐲' => '𝒚','𝐳' => '𝒛','𝐀' => '𝑨','𝐁' => '𝑩',
    '𝐂' => '𝑪','𝐃' => '𝑫','𝐄' => '𝑬','𝐅' => '𝑭','𝐆' => '𝑮','𝐇' => '𝑯','𝐈' => '𝑰',
    '𝐉' => '𝑱','𝐊' => '𝑲','𝐋' => '𝑳','𝐌' => '𝑴','𝐍' => '𝑵','𝐎' => '𝑶','𝐏' => '𝑷',
    '𝐐' => '𝑸','𝐑' => '𝑹','𝐒' => '𝑺','𝐓' => '𝑻','𝐔' => '𝑼','𝐕' => '𝑽','𝐖' => '𝑾',
    '𝐗' => '𝑿','𝐘' => '𝒀','𝐙' => '𝒁','𝚪' => '𝜞','𝚫' => '𝜟','𝚯' => '𝜣','𝚲' => '𝜦',
    '𝚵' => '𝜩','𝚷' => '𝜫','𝚹' => '𝜭','𝚺' => '𝜮','𝚼' => '𝜰','𝚽' => '𝜱','𝚿' => '𝜳',
    '𝛀' => '𝜴','𝛂' => '𝜶','𝛃' => '𝜷','𝛄' => '𝜸','𝛅' => '𝜹','𝛆' => '𝜺','𝛇' => '𝜻',
    '𝛈' => '𝜼','𝛉' => '𝜽','𝛊' => '𝜾','𝛋' => '𝜿','𝛌' => '𝝀','𝛍' => '𝝁','𝛎' => '𝝂',
    '𝛏' => '𝝃','𝛑' => '𝝅','𝛒' => '𝝆','𝛔' => '𝝈','𝛕' => '𝝉','𝛖' => '𝝊','𝛗' => '𝝋',
    '𝛘' => '𝝌','𝛙' => '𝝍','𝛚' => '𝝎','𝛛' => '𝝏','𝛜' => '𝝐','𝛝' => '𝝑','𝛞' => '𝝒',
    '𝛟' => '𝝓','𝛠' => '𝝔','𝛡' => '𝝕',
    // sans
    // '𝖺𝖻𝖼𝖽𝖾𝖿𝗀𝗁𝗂𝗃𝗄𝗅𝗆𝗇𝗈𝗉𝗊𝗋𝗌𝗍𝗎𝗏𝗐𝗑𝗒𝗓𝖠𝖡𝖢𝖣𝖤𝖥𝖦𝖧𝖨𝖩𝖪𝖫𝖬𝖭𝖮𝖯𝖰𝖱𝖲𝖳𝖴𝖵𝖶𝖷𝖸𝖹'
    //     => '𝘢𝘣𝘤𝘥𝘦𝘧𝘨𝘩𝘪𝘫𝘬𝘭𝘮𝘯𝘰𝘱𝘲𝘳𝘴𝘵𝘶𝘷𝘸𝘹𝘺𝘻𝘈𝘉𝘊𝘋𝘌𝘍𝘎𝘏𝘐𝘑𝘒𝘓𝘔𝘕𝘖𝘗𝘘𝘙𝘚𝘛𝘜𝘝𝘞𝘟𝘠𝘡'
    '𝖺' => '𝘢','𝖻' => '𝘣','𝖼' => '𝘤','𝖽' => '𝘥','𝖾' => '𝘦','𝖿' => '𝘧','𝗀' => '𝘨',
    '𝗁' => '𝘩','𝗂' => '𝘪','𝗃' => '𝘫','𝗄' => '𝘬','𝗅' => '𝘭','𝗆' => '𝘮','𝗇' => '𝘯',
    '𝗈' => '𝘰','𝗉' => '𝘱','𝗊' => '𝘲','𝗋' => '𝘳','𝗌' => '𝘴','𝗍' => '𝘵','𝗎' => '𝘶',
    '𝗏' => '𝘷','𝗐' => '𝘸','𝗑' => '𝘹','𝗒' => '𝘺','𝗓' => '𝘻','𝖠' => '𝘈','𝖡' => '𝘉',
    '𝖢' => '𝘊','𝖣' => '𝘋','𝖤' => '𝘌','𝖥' => '𝘍','𝖦' => '𝘎','𝖧' => '𝘏','𝖨' => '𝘐',
    '𝖩' => '𝘑','𝖪' => '𝘒','𝖫' => '𝘓','𝖬' => '𝘔','𝖭' => '𝘕','𝖮' => '𝘖','𝖯' => '𝘗',
    '𝖰' => '𝘘','𝖱' => '𝘙','𝖲' => '𝘚','𝖳' => '𝘛','𝖴' => '𝘜','𝖵' => '𝘝','𝖶' => '𝘞',
    '𝖷' => '𝘟','𝖸' => '𝘠','𝖹' => '𝘡',
    // bold sans
    // '𝗮𝗯𝗰𝗱𝗲𝗳𝗴𝗵𝗶𝗷𝗸𝗹𝗺𝗻𝗼𝗽𝗾𝗿𝘀𝘁𝘂𝘃𝘄𝘅𝘆𝘇𝗔𝗕𝗖𝗗𝗘𝗙𝗚𝗛𝗜𝗝𝗞𝗟𝗠𝗡𝗢𝗣𝗤𝗥𝗦𝗧𝗨𝗩𝗪𝗫𝗬𝗭𝝘𝝙𝝝𝝠𝝣𝝥𝝧𝝨𝝪𝝫𝝭𝝮𝝰𝝱𝝲𝝳𝝴𝝵𝝶𝝷𝝸𝝹𝝺𝝻𝝼𝝽𝝿𝞀𝞂𝞃𝞄𝞅𝞆𝞇𝞈𝞉𝞊𝞋𝞌𝞍𝞎𝞏'
    //     => '𝙖𝙗𝙘𝙙𝙚𝙛𝙜𝙝𝙞𝙟𝙠𝙡𝙢𝙣𝙤𝙥𝙦𝙧𝙨𝙩𝙪𝙫𝙬𝙭𝙮𝙯𝘼𝘽𝘾𝘿𝙀𝙁𝙂𝙃𝙄𝙅𝙆𝙇𝙈𝙉𝙊𝙋𝙌𝙍𝙎𝙏𝙐𝙑𝙒𝙓𝙔𝙕𝞒𝞓𝞗𝞚𝞝𝞟𝞡𝞢𝞤𝞥𝞧𝞨𝞪𝞫𝞬𝞭𝞮𝞯𝞰𝞱𝞲𝞳𝞴𝞵𝞶𝞷𝞹𝞺𝞼𝞽𝞾𝞿𝟀𝟁𝟂𝟃𝟄𝟅𝟆𝟇𝟈𝟉'
    '𝗮' => '𝙖','𝗯' => '𝙗','𝗰' => '𝙘','𝗱' => '𝙙','𝗲' => '𝙚','𝗳' => '𝙛','𝗴' => '𝙜',
    '𝗵' => '𝙝','𝗶' => '𝙞','𝗷' => '𝙟','𝗸' => '𝙠','𝗹' => '𝙡','𝗺' => '𝙢','𝗻' => '𝙣',
    '𝗼' => '𝙤','𝗽' => '𝙥','𝗾' => '𝙦','𝗿' => '𝙧','𝘀' => '𝙨','𝘁' => '𝙩','𝘂' => '𝙪',
    '𝘃' => '𝙫','𝘄' => '𝙬','𝘅' => '𝙭','𝘆' => '𝙮','𝘇' => '𝙯','𝗔' => '𝘼','𝗕' => '𝘽',
    '𝗖' => '𝘾','𝗗' => '𝘿','𝗘' => '𝙀','𝗙' => '𝙁','𝗚' => '𝙂','𝗛' => '𝙃','𝗜' => '𝙄',
    '𝗝' => '𝙅','𝗞' => '𝙆','𝗟' => '𝙇','𝗠' => '𝙈','𝗡' => '𝙉','𝗢' => '𝙊','𝗣' => '𝙋',
    '𝗤' => '𝙌','𝗥' => '𝙍','𝗦' => '𝙎','𝗧' => '𝙏','𝗨' => '𝙐','𝗩' => '𝙑','𝗪' => '𝙒',
    '𝗫' => '𝙓','𝗬' => '𝙔','𝗭' => '𝙕','𝝘' => '𝞒','𝝙' => '𝞓','𝝝' => '𝞗','𝝠' => '𝞚',
    '𝝣' => '𝞝','𝝥' => '𝞟','𝝧' => '𝞡','𝝨' => '𝞢','𝝪' => '𝞤','𝝫' => '𝞥','𝝭' => '𝞧',
    '𝝮' => '𝞨','𝝰' => '𝞪','𝝱' => '𝞫','𝝲' => '𝞬','𝝳' => '𝞭','𝝴' => '𝞮','𝝵' => '𝞯',
    '𝝶' => '𝞰','𝝷' => '𝞱','𝝸' => '𝞲','𝝹' => '𝞳','𝝺' => '𝞴','𝝻' => '𝞵','𝝼' => '𝞶',
    '𝝽' => '𝞷','𝝿' => '𝞹','𝞀' => '𝞺','𝞂' => '𝞼','𝞃' => '𝞽','𝞄' => '𝞾','𝞅' => '𝞿',
    '𝞆' => '𝟀','𝞇' => '𝟁','𝞈' => '𝟂','𝞉' => '𝟃','𝞊' => '𝟄','𝞋' => '𝟅','𝞌' => '𝟆',
    '𝞍' => '𝟇','𝞎' => '𝟈','𝞏' => '𝟉',
};


/*
static SCRIPT: Map<char,char> = phf_map! {
 //'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
 //     => '𝒶𝒷𝒸𝒹ℯ𝒻ℊ𝒽𝒾𝒿𝓀𝓁𝓂𝓃ℴ𝓅𝓆𝓇𝓈𝓉𝓊𝓋𝓌𝓍𝓎𝓏𝒜ℬ𝒞𝒟ℰℱ𝒢ℋℐ𝒥𝒦ℒℳ𝒩𝒪𝒫𝒬ℛ𝒮𝒯𝒰𝒱𝒲𝒳𝒴𝒵'
    'a' => '𝒶','b' => '𝒷','c' => '𝒸','d' => '𝒹','e' => 'ℯ','f' => '𝒻','g' => 'ℊ',
    'h' => '𝒽','i' => '𝒾','j' => '𝒿','k' => '𝓀','l' => '𝓁','m' => '𝓂','n' => '𝓃',
    'o' => 'ℴ','p' => '𝓅','q' => '𝓆','r' => '𝓇','s' => '𝓈','t' => '𝓉','u' => '𝓊',
    'v' => '𝓋','w' => '𝓌','x' => '𝓍','y' => '𝓎','z' => '𝓏','A' => '𝒜','B' => 'ℬ',
    'C' => '𝒞','D' => '𝒟','E' => 'ℰ','F' => 'ℱ','G' => '𝒢','H' => 'ℋ','I' => 'ℐ',
    'J' => '𝒥','K' => '𝒦','L' => 'ℒ','M' => 'ℳ','N' => '𝒩','O' => '𝒪','P' => '𝒫',
    'Q' => '𝒬','R' => 'ℛ','S' => '𝒮','T' => '𝒯','U' => '𝒰','V' => '𝒱','W' => '𝒲',
    'X' => '𝒳','Y' => '𝒴','Z' => '𝒵'
};

static BOLD: Map<char,char> = phf_map! {
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789Γ∆ΘΛΞΠϴΣΥΦΨΩαβγδεζηθικλμνξπρστυφχψω∂ϵϑϰϕϱϖ'
    //     => '𝐚𝐛𝐜𝐝𝐞𝐟𝐠𝐡𝐢𝐣𝐤𝐥𝐦𝐧𝐨𝐩𝐪𝐫𝐬𝐭𝐮𝐯𝐰𝐱𝐲𝐳𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇𝐈𝐉𝐊𝐋𝐌𝐍𝐎𝐏𝐐𝐑𝐒𝐓𝐔𝐕𝐖𝐗𝐘𝐙𝟎𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖𝟗𝚪𝚫𝚯𝚲𝚵𝚷𝚹𝚺𝚼𝚽𝚿𝛀𝛂𝛃𝛄𝛅𝛆𝛇𝛈𝛉𝛊𝛋𝛌𝛍𝛎𝛏𝛑𝛒𝛔𝛕𝛖𝛗𝛘𝛙𝛚𝛛𝛜𝛝𝛞𝛟𝛠𝛡'
    'a' => '𝐚','b' => '𝐛','c' => '𝐜','d' => '𝐝','e' => '𝐞','f' => '𝐟','g' => '𝐠',
    'h' => '𝐡','i' => '𝐢','j' => '𝐣','k' => '𝐤','l' => '𝐥','m' => '𝐦','n' => '𝐧',
    'o' => '𝐨','p' => '𝐩','q' => '𝐪','r' => '𝐫','s' => '𝐬','t' => '𝐭','u' => '𝐮',
    'v' => '𝐯','w' => '𝐰','x' => '𝐱','y' => '𝐲','z' => '𝐳','A' => '𝐀','B' => '𝐁',
    'C' => '𝐂','D' => '𝐃','E' => '𝐄','F' => '𝐅','G' => '𝐆','H' => '𝐇','I' => '𝐈',
    'J' => '𝐉','K' => '𝐊','L' => '𝐋','M' => '𝐌','N' => '𝐍','O' => '𝐎','P' => '𝐏',
    'Q' => '𝐐','R' => '𝐑','S' => '𝐒','T' => '𝐓','U' => '𝐔','V' => '𝐕','W' => '𝐖',
    'X' => '𝐗','Y' => '𝐘','Z' => '𝐙','0' => '𝟎','1' => '𝟏','2' => '𝟐','3' => '𝟑',
    '4' => '𝟒','5' => '𝟓','6' => '𝟔','7' => '𝟕','8' => '𝟖','9' => '𝟗','Γ' => '𝚪',
    '∆' => '𝚫','Θ' => '𝚯','Λ' => '𝚲','Ξ' => '𝚵','Π' => '𝚷','ϴ' => '𝚹','Σ' => '𝚺',
    'Υ' => '𝚼','Φ' => '𝚽','Ψ' => '𝚿','Ω' => '𝛀','α' => '𝛂','β' => '𝛃','γ' => '𝛄',
    'δ' => '𝛅','ε' => '𝛆','ζ' => '𝛇','η' => '𝛈','θ' => '𝛉','ι' => '𝛊','κ' => '𝛋',
    'λ' => '𝛌','μ' => '𝛍','ν' => '𝛎','ξ' => '𝛏','π' => '𝛑','ρ' => '𝛒','σ' => '𝛔',
    'τ' => '𝛕','υ' => '𝛖','φ' => '𝛗','χ' => '𝛘','ψ' => '𝛙','ω' => '𝛚','∂' => '𝛛',
    'ϵ' => '𝛜','ϑ' => '𝛝','ϰ' => '𝛞','ϕ' => '𝛟','ϱ' => '𝛠','ϖ' => '𝛡'
};

static ITALIC: Map<char,char> = phf_map! {
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZΓ∆ΘΛΞΠϴΣΥΦΨΩαβγδεζηθικλμνξπρστυφχψω∂ϵϑϰϕϱϖ'
    //     => '𝑎𝑏𝑐𝑑𝑒𝑓𝑔ℎ𝑖𝑗𝑘𝑙𝑚𝑛𝑜𝑝𝑞𝑟𝑠𝑡𝑢𝑣𝑤𝑥𝑦𝑧𝐴𝐵𝐶𝐷𝐸𝐹𝐺𝐻𝐼𝐽𝐾𝐿𝑀𝑁𝑂𝑃𝑄𝑅𝑆𝑇𝑈𝑉𝑊𝑋𝑌𝑍𝛤𝛥𝛩𝛬𝛯𝛱𝛳𝛴𝛶𝛷𝛹𝛺𝛼𝛽𝛾𝛿𝜀𝜁𝜂𝜃𝜄𝜅𝜆𝜇𝜈𝜉𝜋𝜌𝜎𝜏𝜐𝜑𝜒𝜓𝜔𝜕𝜖𝜗𝜘𝜙𝜚𝜛'
    'a' => '𝑎','b' => '𝑏','c' => '𝑐','d' => '𝑑','e' => '𝑒','f' => '𝑓','g' => '𝑔',
    'h' => 'ℎ','i' => '𝑖','j' => '𝑗','k' => '𝑘','l' => '𝑙','m' => '𝑚','n' => '𝑛',
    'o' => '𝑜','p' => '𝑝','q' => '𝑞','r' => '𝑟','s' => '𝑠','t' => '𝑡','u' => '𝑢',
    'v' => '𝑣','w' => '𝑤','x' => '𝑥','y' => '𝑦','z' => '𝑧','A' => '𝐴','B' => '𝐵',
    'C' => '𝐶','D' => '𝐷','E' => '𝐸','F' => '𝐹','G' => '𝐺','H' => '𝐻','I' => '𝐼',
    'J' => '𝐽','K' => '𝐾','L' => '𝐿','M' => '𝑀','N' => '𝑁','O' => '𝑂','P' => '𝑃',
    'Q' => '𝑄','R' => '𝑅','S' => '𝑆','T' => '𝑇','U' => '𝑈','V' => '𝑉','W' => '𝑊',
    'X' => '𝑋','Y' => '𝑌','Z' => '𝑍','Γ' => '𝛤','∆' => '𝛥','Θ' => '𝛩','Λ' => '𝛬',
    'Ξ' => '𝛯','Π' => '𝛱','ϴ' => '𝛳','Σ' => '𝛴','Υ' => '𝛶','Φ' => '𝛷','Ψ' => '𝛹',
    'Ω' => '𝛺','α' => '𝛼','β' => '𝛽','γ' => '𝛾','δ' => '𝛿','ε' => '𝜀','ζ' => '𝜁',
    'η' => '𝜂','θ' => '𝜃','ι' => '𝜄','κ' => '𝜅','λ' => '𝜆','μ' => '𝜇','ν' => '𝜈',
    'ξ' => '𝜉','π' => '𝜋','ρ' => '𝜌','σ' => '𝜎','τ' => '𝜏','υ' => '𝜐','φ' => '𝜑',
    'χ' => '𝜒','ψ' => '𝜓','ω' => '𝜔','∂' => '𝜕','ϵ' => '𝜖','ϑ' => '𝜗','ϰ' => '𝜘',
    'ϕ' => '𝜙','ϱ' => '𝜚','ϖ' => '𝜛'
};

static SANS: Map<char,char> = phf_map! {
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    //     => '𝖺𝖻𝖼𝖽𝖾𝖿𝗀𝗁𝗂𝗃𝗄𝗅𝗆𝗇𝗈𝗉𝗊𝗋𝗌𝗍𝗎𝗏𝗐𝗑𝗒𝗓𝖠𝖡𝖢𝖣𝖤𝖥𝖦𝖧𝖨𝖩𝖪𝖫𝖬𝖭𝖮𝖯𝖰𝖱𝖲𝖳𝖴𝖵𝖶𝖷𝖸𝖹𝟢𝟣𝟤𝟥𝟦𝟧𝟨𝟩𝟪𝟫'
    'a' => '𝖺','b' => '𝖻','c' => '𝖼','d' => '𝖽','e' => '𝖾','f' => '𝖿','g' => '𝗀',
    'h' => '𝗁','i' => '𝗂','j' => '𝗃','k' => '𝗄','l' => '𝗅','m' => '𝗆','n' => '𝗇',
    'o' => '𝗈','p' => '𝗉','q' => '𝗊','r' => '𝗋','s' => '𝗌','t' => '𝗍','u' => '𝗎',
    'v' => '𝗏','w' => '𝗐','x' => '𝗑','y' => '𝗒','z' => '𝗓','A' => '𝖠','B' => '𝖡',
    'C' => '𝖢','D' => '𝖣','E' => '𝖤','F' => '𝖥','G' => '𝖦','H' => '𝖧','I' => '𝖨',
    'J' => '𝖩','K' => '𝖪','L' => '𝖫','M' => '𝖬','N' => '𝖭','O' => '𝖮','P' => '𝖯',
    'Q' => '𝖰','R' => '𝖱','S' => '𝖲','T' => '𝖳','U' => '𝖴','V' => '𝖵','W' => '𝖶',
    'X' => '𝖷','Y' => '𝖸','Z' => '𝖹','0' => '𝟢','1' => '𝟣','2' => '𝟤','3' => '𝟥',
    '4' => '𝟦','5' => '𝟧','6' => '𝟨','7' => '𝟩','8' => '𝟪','9' => '𝟫'
};

static CAPITAL: Map<char,char> = phf_map! {
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    //     => 'ᴀʙᴄᴅᴇғɢʜɪᴊᴋʟᴍɴᴏᴘǫʀsᴛᴜᴠᴡxʏᴢ𝖠𝖡𝖢𝖣𝖤𝖥𝖦𝖧𝖨𝖩𝖪𝖫𝖬𝖭𝖮𝖯𝖰𝖱𝖲𝖳𝖴𝖵𝖶𝖷𝖸𝖹'
    'a' => 'ᴀ','b' => 'ʙ','c' => 'ᴄ','d' => 'ᴅ','e' => 'ᴇ','f' => 'ғ','g' => 'ɢ',
    'h' => 'ʜ','i' => 'ɪ','j' => 'ᴊ','k' => 'ᴋ','l' => 'ʟ','m' => 'ᴍ','n' => 'ɴ',
    'o' => 'ᴏ','p' => 'ǫ','q' => 'ǫ','r' => 'ʀ','s' => 's','t' => 'ᴛ','u' => 'ᴜ',
    'v' => 'ᴠ','w' => 'ᴡ','x' => 'x','y' => 'ʏ','z' => 'ᴢ','A' => '𝖠','B' => '𝖡',
    'C' => '𝖢','D' => '𝖣','E' => '𝖤','F' => '𝖥','G' => '𝖦','H' => '𝖧','I' => '𝖨',
    'J' => '𝖩','K' => '𝖪','L' => '𝖫','M' => '𝖬','N' => '𝖭','O' => '𝖮','P' => '𝖯',
    'Q' => '𝖰','R' => '𝖱','S' => '𝖲','T' => '𝖳','U' => '𝖴','V' => '𝖵','W' => '𝖶',
    'X' => '𝖷','Y' => '𝖸','Z' => '𝖹'
};

static FRAKTUR: Map<char,char> = phf_map! {
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    //     => '𝔞𝔟𝔠𝔡𝔢𝔣𝔤𝔥𝔦𝔧𝔨𝔩𝔪𝔫𝔬𝔭𝔮𝔯𝔰𝔱𝔲𝔳𝔴𝔵𝔶𝔷𝔄𝔅ℭ𝔇𝔈𝔉𝔊ℌℑ𝔍𝔎𝔏𝔐𝔑𝔒𝔓𝔔ℜ𝔖𝔗𝔘𝔙𝔚𝔛𝔜ℨ'
    'a' => '𝔞','b' => '𝔟','c' => '𝔠','d' => '𝔡','e' => '𝔢','f' => '𝔣','g' => '𝔤',
    'h' => '𝔥','i' => '𝔦','j' => '𝔧','k' => '𝔨','l' => '𝔩','m' => '𝔪','n' => '𝔫',
    'o' => '𝔬','p' => '𝔭','q' => '𝔮','r' => '𝔯','s' => '𝔰','t' => '𝔱','u' => '𝔲',
    'v' => '𝔳','w' => '𝔴','x' => '𝔵','y' => '𝔶','z' => '𝔷','A' => '𝔄','B' => '𝔅',
    'C' => 'ℭ','D' => '𝔇','E' => '𝔈','F' => '𝔉','G' => '𝔊','H' => 'ℌ','I' => 'ℑ',
    'J' => '𝔍','K' => '𝔎','L' => '𝔏','M' => '𝔐','N' => '𝔑','O' => '𝔒','P' => '𝔓',
    'Q' => '𝔔','R' => 'ℜ','S' => '𝔖','T' => '𝔗','U' => '𝔘','V' => '𝔙','W' => '𝔚',
    'X' => '𝔛','Y' => '𝔜','Z' => 'ℨ'
};

static MONOSPACED: Map<char,char> = phf_map! {
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    //     => '𝚊𝚋𝚌𝚍𝚎𝚏𝚐𝚑𝚒𝚓𝚔𝚕𝚖𝚗𝚘𝚙𝚚𝚛𝚜𝚝𝚞𝚟𝚠𝚡𝚢𝚣𝙰𝙱𝙲𝙳𝙴𝙵𝙶𝙷𝙸𝙹𝙺𝙻𝙼𝙽𝙾𝙿𝚀𝚁𝚂𝚃𝚄𝚅𝚆𝚇𝚈𝚉0𝟷𝟸𝟹𝟺𝟻𝟼𝟽𝟾𝟿'
    'a' => '𝚊','b' => '𝚋','c' => '𝚌','d' => '𝚍','e' => '𝚎','f' => '𝚏','g' => '𝚐',
    'h' => '𝚑','i' => '𝚒','j' => '𝚓','k' => '𝚔','l' => '𝚕','m' => '𝚖','n' => '𝚗',
    'o' => '𝚘','p' => '𝚙','q' => '𝚚','r' => '𝚛','s' => '𝚜','t' => '𝚝','u' => '𝚞',
    'v' => '𝚟','w' => '𝚠','x' => '𝚡','y' => '𝚢','z' => '𝚣','A' => '𝙰','B' => '𝙱',
    'C' => '𝙲','D' => '𝙳','E' => '𝙴','F' => '𝙵','G' => '𝙶','H' => '𝙷','I' => '𝙸',
    'J' => '𝙹','K' => '𝙺','L' => '𝙻','M' => '𝙼','N' => '𝙽','O' => '𝙾','P' => '𝙿',
    'Q' => '𝚀','R' => '𝚁','S' => '𝚂','T' => '𝚃','U' => '𝚄','V' => '𝚅','W' => '𝚆',
    'X' => '𝚇','Y' => '𝚈','Z' => '𝚉','0' => '𝟶','1' => '𝟷','2' => '𝟸','3' => '𝟹',
    '4' => '𝟺','5' => '𝟻','6' => '𝟼','7' => '𝟽','8' => '𝟾','9' => '𝟿'
};

static BLACKBOARD: Map<char,char> = phf_map! {
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    //     => '𝕒𝕓𝕔𝕕𝕖𝕗𝕘𝕙𝕚𝕛𝕜𝕝𝕞𝕟𝕠𝕡𝕢𝕣𝕤𝕥𝕦𝕧𝕨𝕩𝕪𝕫𝔸𝔹ℂ𝔻𝔼𝔽𝔾ℍ𝕀𝕁𝕂𝕃𝕄ℕ𝕆ℙℚℝ𝕊𝕋𝕌𝕍𝕎𝕏𝕐ℤ𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡'
    'a' => '𝕒','b' => '𝕓','c' => '𝕔','d' => '𝕕','e' => '𝕖','f' => '𝕗','g' => '𝕘',
    'h' => '𝕙','i' => '𝕚','j' => '𝕛','k' => '𝕜','l' => '𝕝','m' => '𝕞','n' => '𝕟',
    'o' => '𝕠','p' => '𝕡','q' => '𝕢','r' => '𝕣','s' => '𝕤','t' => '𝕥','u' => '𝕦',
    'v' => '𝕧','w' => '𝕨','x' => '𝕩','y' => '𝕪','z' => '𝕫','A' => '𝔸','B' => '𝔹',
    'C' => 'ℂ','D' => '𝔻','E' => '𝔼','F' => '𝔽','G' => '𝔾','H' => 'ℍ','I' => '𝕀',
    'J' => '𝕁','K' => '𝕂','L' => '𝕃','M' => '𝕄','N' => 'ℕ','O' => '𝕆','P' => 'ℙ',
    'Q' => 'ℚ','R' => 'ℝ','S' => '𝕊','T' => '𝕋','U' => '𝕌','V' => '𝕍','W' => '𝕎',
    'X' => '𝕏','Y' => '𝕐','Z' => 'ℤ','0' => '𝟘','1' => '𝟙','2' => '𝟚','3' => '𝟛',
    '4' => '𝟜','5' => '𝟝','6' => '𝟞','7' => '𝟟','8' => '𝟠','9' => '𝟡'
};

static BOLD_SCRIPT: Map<char,char> = phf_map! {
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    //     => '𝓪𝓫𝓬𝓭𝓮𝓯𝓰𝓱𝓲𝓳𝓴𝓵𝓶𝓷𝓸𝓹𝓺𝓻𝓼𝓽𝓾𝓿𝔀𝔁𝔂𝔃𝓐𝓑𝓒𝓓𝓔𝓕𝓖𝓗𝓘𝓙𝓚𝓛𝓜𝓝𝓞𝓟𝓠𝓡𝓢𝓣𝓤𝓥𝓦𝓧𝓨𝓩'
    'a' => '𝓪','b' => '𝓫','c' => '𝓬','d' => '𝓭','e' => '𝓮','f' => '𝓯','g' => '𝓰',
    'h' => '𝓱','i' => '𝓲','j' => '𝓳','k' => '𝓴','l' => '𝓵','m' => '𝓶','n' => '𝓷',
    'o' => '𝓸','p' => '𝓹','q' => '𝓺','r' => '𝓻','s' => '𝓼','t' => '𝓽','u' => '𝓾',
    'v' => '𝓿','w' => '𝔀','x' => '𝔁','y' => '𝔂','z' => '𝔃','A' => '𝓐','B' => '𝓑',
    'C' => '𝓒','D' => '𝓓','E' => '𝓔','F' => '𝓕','G' => '𝓖','H' => '𝓗','I' => '𝓘',
    'J' => '𝓙','K' => '𝓚','L' => '𝓛','M' => '𝓜','N' => '𝓝','O' => '𝓞','P' => '𝓟',
    'Q' => '𝓠','R' => '𝓡','S' => '𝓢','T' => '𝓣','U' => '𝓤','V' => '𝓥','W' => '𝓦',
    'X' => '𝓧','Y' => '𝓨','Z' => '𝓩'
};

static BOLD_ITALIC: Map<char,char> = phf_map! {
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZΓ∆ΘΛΞΠϴΣΥΦΨΩαβγδεζηθικλμνξπρστυφχψω∂ϵϑϰϕϱϖ'
    //     => '𝒂𝒃𝒄𝒅𝒆𝒇𝒈𝒉𝒊𝒋𝒌𝒍𝒎𝒏𝒐𝒑𝒒𝒓𝒔𝒕𝒖𝒗𝒘𝒙𝒚𝒛𝑨𝑩𝑪𝑫𝑬𝑭𝑮𝑯𝑰𝑱𝑲𝑳𝑴𝑵𝑶𝑷𝑸𝑹𝑺𝑻𝑼𝑽𝑾𝑿𝒀𝒁𝜞𝜟𝜣𝜦𝜩𝜫𝜭𝜮𝜰𝜱𝜳𝜴𝜶𝜷𝜸𝜹𝜺𝜻𝜼𝜽𝜾𝜿𝝀𝝁𝝂𝝃𝝅𝝆𝝈𝝉𝝊𝝋𝝌𝝍𝝎𝝏𝝐𝝑𝝒𝝓𝝔𝝕'
    'a' => '𝒂','b' => '𝒃','c' => '𝒄','d' => '𝒅','e' => '𝒆','f' => '𝒇','g' => '𝒈',
    'h' => '𝒉','i' => '𝒊','j' => '𝒋','k' => '𝒌','l' => '𝒍','m' => '𝒎','n' => '𝒏',
    'o' => '𝒐','p' => '𝒑','q' => '𝒒','r' => '𝒓','s' => '𝒔','t' => '𝒕','u' => '𝒖',
    'v' => '𝒗','w' => '𝒘','x' => '𝒙','y' => '𝒚','z' => '𝒛','A' => '𝑨','B' => '𝑩',
    'C' => '𝑪','D' => '𝑫','E' => '𝑬','F' => '𝑭','G' => '𝑮','H' => '𝑯','I' => '𝑰',
    'J' => '𝑱','K' => '𝑲','L' => '𝑳','M' => '𝑴','N' => '𝑵','O' => '𝑶','P' => '𝑷',
    'Q' => '𝑸','R' => '𝑹','S' => '𝑺','T' => '𝑻','U' => '𝑼','V' => '𝑽','W' => '𝑾',
    'X' => '𝑿','Y' => '𝒀','Z' => '𝒁','Γ' => '𝜞','∆' => '𝜟','Θ' => '𝜣','Λ' => '𝜦',
    'Ξ' => '𝜩','Π' => '𝜫','ϴ' => '𝜭','Σ' => '𝜮','Υ' => '𝜰','Φ' => '𝜱','Ψ' => '𝜳',
    'Ω' => '𝜴','α' => '𝜶','β' => '𝜷','γ' => '𝜸','δ' => '𝜹','ε' => '𝜺','ζ' => '𝜻',
    'η' => '𝜼','θ' => '𝜽','ι' => '𝜾','κ' => '𝜿','λ' => '𝝀','μ' => '𝝁','ν' => '𝝂',
    'ξ' => '𝝃','π' => '𝝅','ρ' => '𝝆','σ' => '𝝈','τ' => '𝝉','υ' => '𝝊','φ' => '𝝋',
    'χ' => '𝝌','ψ' => '𝝍','ω' => '𝝎','∂' => '𝝏','ϵ' => '𝝐','ϑ' => '𝝑','ϰ' => '𝝒',
    'ϕ' => '𝝓','ϱ' => '𝝔','ϖ' => '𝝕'
};

static BOLD_SANS: Map<char,char> = phf_map! {
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789Γ∆ΘΛΞΠϴΣΥΦΨΩαβγδεζηθικλμνξπρστυφχψω∂ϵϑϰϕϱϖ'
    //     => '𝗮𝗯𝗰𝗱𝗲𝗳𝗴𝗵𝗶𝗷𝗸𝗹𝗺𝗻𝗼𝗽𝗾𝗿𝘀𝘁𝘂𝘃𝘄𝘅𝘆𝘇𝗔𝗕𝗖𝗗𝗘𝗙𝗚𝗛𝗜𝗝𝗞𝗟𝗠𝗡𝗢𝗣𝗤𝗥𝗦𝗧𝗨𝗩𝗪𝗫𝗬𝗭𝟬𝟭𝟮𝟯𝟰𝟱𝟲𝟳𝟴𝟵𝝘𝝙𝝝𝝠𝝣𝝥𝝧𝝨𝝪𝝫𝝭𝝮𝝰𝝱𝝲𝝳𝝴𝝵𝝶𝝷𝝸𝝹𝝺𝝻𝝼𝝽𝝿𝞀𝞂𝞃𝞄𝞅𝞆𝞇𝞈𝞉𝞊𝞋𝞌𝞍𝞎𝞏'
    'a' => '𝗮','b' => '𝗯','c' => '𝗰','d' => '𝗱','e' => '𝗲','f' => '𝗳','g' => '𝗴',
    'h' => '𝗵','i' => '𝗶','j' => '𝗷','k' => '𝗸','l' => '𝗹','m' => '𝗺','n' => '𝗻',
    'o' => '𝗼','p' => '𝗽','q' => '𝗾','r' => '𝗿','s' => '𝘀','t' => '𝘁','u' => '𝘂',
    'v' => '𝘃','w' => '𝘄','x' => '𝘅','y' => '𝘆','z' => '𝘇','A' => '𝗔','B' => '𝗕',
    'C' => '𝗖','D' => '𝗗','E' => '𝗘','F' => '𝗙','G' => '𝗚','H' => '𝗛','I' => '𝗜',
    'J' => '𝗝','K' => '𝗞','L' => '𝗟','M' => '𝗠','N' => '𝗡','O' => '𝗢','P' => '𝗣',
    'Q' => '𝗤','R' => '𝗥','S' => '𝗦','T' => '𝗧','U' => '𝗨','V' => '𝗩','W' => '𝗪',
    'X' => '𝗫','Y' => '𝗬','Z' => '𝗭','0' => '𝟬','1' => '𝟭','2' => '𝟮','3' => '𝟯',
    '4' => '𝟰','5' => '𝟱','6' => '𝟲','7' => '𝟳','8' => '𝟴','9' => '𝟵','Γ' => '𝝘',
    '∆' => '𝝙','Θ' => '𝝝','Λ' => '𝝠','Ξ' => '𝝣','Π' => '𝝥','ϴ' => '𝝧','Σ' => '𝝨',
    'Υ' => '𝝪','Φ' => '𝝫','Ψ' => '𝝭','Ω' => '𝝮','α' => '𝝰','β' => '𝝱','γ' => '𝝲',
    'δ' => '𝝳','ε' => '𝝴','ζ' => '𝝵','η' => '𝝶','θ' => '𝝷','ι' => '𝝸','κ' => '𝝹',
    'λ' => '𝝺','μ' => '𝝻','ν' => '𝝼','ξ' => '𝝽','π' => '𝝿','ρ' => '𝞀','σ' => '𝞂',
    'τ' => '𝞃','υ' => '𝞄','φ' => '𝞅','χ' => '𝞆','ψ' => '𝞇','ω' => '𝞈','∂' => '𝞉',
    'ϵ' => '𝞊','ϑ' => '𝞋','ϰ' => '𝞌','ϕ' => '𝞍','ϱ' => '𝞎','ϖ' => '𝞏'
};

static BOLD_FRAKTUR: Map<char,char> = phf_map! {
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    //     => '𝖆𝖇𝖈𝖉𝖊𝖋𝖌𝖍𝖎𝖏𝖐𝖑𝖒𝖓𝖔𝖕𝖖𝖗𝖘𝖙𝖚𝖛𝖜𝖝𝖞𝖟𝕬𝕭𝕮𝕯𝕰𝕱𝕲𝕳𝕴𝕵𝕶𝕷𝕸𝕹𝕺𝕻𝕼𝕽𝕾𝕿𝖀𝖁𝖂𝖃𝖄𝖅'
    'a' => '𝖆','b' => '𝖇','c' => '𝖈','d' => '𝖉','e' => '𝖊','f' => '𝖋','g' => '𝖌',
    'h' => '𝖍','i' => '𝖎','j' => '𝖏','k' => '𝖐','l' => '𝖑','m' => '𝖒','n' => '𝖓',
    'o' => '𝖔','p' => '𝖕','q' => '𝖖','r' => '𝖗','s' => '𝖘','t' => '𝖙','u' => '𝖚',
    'v' => '𝖛','w' => '𝖜','x' => '𝖝','y' => '𝖞','z' => '𝖟','A' => '𝕬','B' => '𝕭',
    'C' => '𝕮','D' => '𝕯','E' => '𝕰','F' => '𝕱','G' => '𝕲','H' => '𝕳','I' => '𝕴',
    'J' => '𝕵','K' => '𝕶','L' => '𝕷','M' => '𝕸','N' => '𝕹','O' => '𝕺','P' => '𝕻',
    'Q' => '𝕼','R' => '𝕽','S' => '𝕾','T' => '𝕿','U' => '𝖀','V' => '𝖁','W' => '𝖂',
    'X' => '𝖃','Y' => '𝖄','Z' => '𝖅'
};

static ITALIC_SANS: Map<char,char> = phf_map!{
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    //     => '𝘢𝘣𝘤𝘥𝘦𝘧𝘨𝘩𝘪𝘫𝘬𝘭𝘮𝘯𝘰𝘱𝘲𝘳𝘴𝘵𝘶𝘷𝘸𝘹𝘺𝘻𝘈𝘉𝘊𝘋𝘌𝘍𝘎𝘏𝘐𝘑𝘒𝘓𝘔𝘕𝘖𝘗𝘘𝘙𝘚𝘛𝘜𝘝𝘞𝘟𝘠𝘡'
    'a' => '𝘢','b' => '𝘣','c' => '𝘤','d' => '𝘥','e' => '𝘦','f' => '𝘧','g' => '𝘨',
    'h' => '𝘩','i' => '𝘪','j' => '𝘫','k' => '𝘬','l' => '𝘭','m' => '𝘮','n' => '𝘯',
    'o' => '𝘰','p' => '𝘱','q' => '𝘲','r' => '𝘳','s' => '𝘴','t' => '𝘵','u' => '𝘶',
    'v' => '𝘷','w' => '𝘸','x' => '𝘹','y' => '𝘺','z' => '𝘻','A' => '𝘈','B' => '𝘉',
    'C' => '𝘊','D' => '𝘋','E' => '𝘌','F' => '𝘍','G' => '𝘎','H' => '𝘏','I' => '𝘐',
    'J' => '𝘑','K' => '𝘒','L' => '𝘓','M' => '𝘔','N' => '𝘕','O' => '𝘖','P' => '𝘗',
    'Q' => '𝘘','R' => '𝘙','S' => '𝘚','T' => '𝘛','U' => '𝘜','V' => '𝘝','W' => '𝘞',
    'X' => '𝘟','Y' => '𝘠','Z' => '𝘡'
};

static BOLD_ITALIC_SANS: Map<char,char> = phf_map! {
    // 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZΓ∆ΘΛΞΠϴΣΥΦΨΩαβγδεζηθικλμνξπρστυφχψω∂ϵϑϰϕϱϖ'
    //     => '𝙖𝙗𝙘𝙙𝙚𝙛𝙜𝙝𝙞𝙟𝙠𝙡𝙢𝙣𝙤𝙥𝙦𝙧𝙨𝙩𝙪𝙫𝙬𝙭𝙮𝙯𝘼𝘽𝘾𝘿𝙀𝙁𝙂𝙃𝙄𝙅𝙆𝙇𝙈𝙉𝙊𝙋𝙌𝙍𝙎𝙏𝙐𝙑𝙒𝙓𝙔𝙕𝞒𝞓𝞗𝞚𝞝𝞟𝞡𝞢𝞤𝞥𝞧𝞨𝞪𝞫𝞬𝞭𝞮𝞯𝞰𝞱𝞲𝞳𝞴𝞵𝞶𝞷𝞹𝞺𝞼𝞽𝞾𝞿𝟀𝟁𝟂𝟃𝟄𝟅𝟆𝟇𝟈𝟉'
    'a' => '𝙖','b' => '𝙗','c' => '𝙘','d' => '𝙙','e' => '𝙚','f' => '𝙛','g' => '𝙜',
    'h' => '𝙝','i' => '𝙞','j' => '𝙟','k' => '𝙠','l' => '𝙡','m' => '𝙢','n' => '𝙣',
    'o' => '𝙤','p' => '𝙥','q' => '𝙦','r' => '𝙧','s' => '𝙨','t' => '𝙩','u' => '𝙪',
    'v' => '𝙫','w' => '𝙬','x' => '𝙭','y' => '𝙮','z' => '𝙯','A' => '𝘼','B' => '𝘽',
    'C' => '𝘾','D' => '𝘿','E' => '𝙀','F' => '𝙁','G' => '𝙂','H' => '𝙃','I' => '𝙄',
    'J' => '𝙅','K' => '𝙆','L' => '𝙇','M' => '𝙈','N' => '𝙉','O' => '𝙊','P' => '𝙋',
    'Q' => '𝙌','R' => '𝙍','S' => '𝙎','T' => '𝙏','U' => '𝙐','V' => '𝙑','W' => '𝙒',
    'X' => '𝙓','Y' => '𝙔','Z' => '𝙕','Γ' => '𝞒','∆' => '𝞓','Θ' => '𝞗','Λ' => '𝞚',
    'Ξ' => '𝞝','Π' => '𝞟','ϴ' => '𝞡','Σ' => '𝞢','Υ' => '𝞤','Φ' => '𝞥','Ψ' => '𝞧',
    'Ω' => '𝞨','α' => '𝞪','β' => '𝞫','γ' => '𝞬','δ' => '𝞭','ε' => '𝞮','ζ' => '𝞯',
    'η' => '𝞰','θ' => '𝞱','ι' => '𝞲','κ' => '𝞳','λ' => '𝞴','μ' => '𝞵','ν' => '𝞶',
    'ξ' => '𝞷','π' => '𝞹','ρ' => '𝞺','σ' => '𝞼','τ' => '𝞽','υ' => '𝞾','φ' => '𝞿',
    'χ' => '𝟀','ψ' => '𝟁','ω' => '𝟂','∂' => '𝟃','ϵ' => '𝟄','ϑ' => '𝟅','ϰ' => '𝟆',
    'ϕ' => '𝟇','ϱ' => '𝟈','ϖ' => '𝟉'
};

 */